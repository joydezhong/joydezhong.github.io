<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joyde·zhong的博客</title>
  
  <subtitle>一个Web前端之路的点点滴滴。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/joydezhong/joydezhong.github.io.git/"/>
  <updated>2025-03-26T03:21:50.700Z</updated>
  <id>https://github.com/joydezhong/joydezhong.github.io.git/</id>
  
  <author>
    <name>钟卫鹏（Joyde·zhong）</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>async/await和generator函数</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/11/26/asyncawait%E5%87%BD%E6%95%B0/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/11/26/asyncawait%E5%87%BD%E6%95%B0/</id>
    <published>2021-11-26T14:54:00.000Z</published>
    <updated>2025-03-26T03:21:50.700Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>promise的用法示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(a).<span class="title function_">then</span>(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do someting</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do someting</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>换为async/await用法示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(a)</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(b)</span><br><span class="line">  <span class="keyword">const</span> c = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换为Generator函数的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">myGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> genFn = <span class="title function_">myGenerator</span>();</span><br><span class="line">genFn.<span class="title function_">next</span>(); <span class="comment">// &#123;value: &#x27;1&#x27;, done: false&#125;</span></span><br><span class="line">genFn.<span class="title function_">next</span>(); <span class="comment">// &#123;value: &#x27;2&#x27;, done: false&#125;</span></span><br><span class="line">genFn.<span class="title function_">next</span>(); <span class="comment">// &#123;value: &#x27;3&#x27;, done: true&#125;</span></span><br><span class="line">genFn.<span class="title function_">next</span>(); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>还可以通过next方法传入参数，让Generator函数的yield语句具有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">myGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">yield</span> <span class="string">&#x27;1&#x27;</span>); <span class="comment">// test1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">yield</span> <span class="string">&#x27;2&#x27;</span>); <span class="comment">// test2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">yield</span> <span class="string">&#x27;3&#x27;</span>); <span class="comment">// test3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> genFn = <span class="title function_">myGenerator</span>();</span><br><span class="line">genFn.<span class="title function_">next</span>(<span class="string">&#x27;test1&#x27;</span>);</span><br><span class="line">genFn.<span class="title function_">next</span>(<span class="string">&#x27;test2&#x27;</span>);</span><br><span class="line">genFn.<span class="title function_">next</span>(<span class="string">&#x27;test3&#x27;</span>);</span><br></pre></td></tr></table></figure><p>不同点：</p><ol><li>async/await是自动执行，不需要手动调用next()执行下一步骤。</li><li>async返回的是Promise对象，Generator函数返回生成器对象。</li><li>await能够返回Promise执行resolve/reject的值。</li></ol><p>一、自动执行/手动执行</p><p>手动执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">myGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">myGenerator</span>();</span><br><span class="line"></span><br><span class="line">gen.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  gen.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    gen.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br></pre></td></tr></table></figure><p>自动执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">generator</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> gen = <span class="title function_">generator</span>();</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">_next</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = gen.<span class="title function_">next</span>();</span><br><span class="line">    <span class="keyword">if</span>(result.<span class="property">done</span>) <span class="keyword">return</span> result.<span class="property">value</span>;</span><br><span class="line">    result.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">_next</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">run</span>(generator);</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br></pre></td></tr></table></figure><p>二、返回Promise和捕获异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">generator</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> gen = <span class="title function_">generator</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_next</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> result = gen.<span class="title function_">next</span>(val);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(result.<span class="property">done</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>(result.<span class="property">value</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(result.<span class="property">value</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">_next</span>(res);</span><br><span class="line">      &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        gen.<span class="keyword">throw</span>(error);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">_next</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试使用</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">myGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)) </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">yield</span> <span class="number">2</span>)   <span class="comment">//2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>))</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="title function_">run</span>(myGenerator);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="Generator">Generator</h3><p>结合上面说的async/await不同点，我们可以知道Generator具有的特点</p><ol><li>调用Generator函数，并不会马上执行它里面的语句，而是返回一个这个生成器的迭代器(iterator)对象。</li><li>可以分段执行，通过调用next()方法，执行下一个步骤。</li><li>next()方法固定的返回一个对象，对象里面的value是当前步骤yield后面的值，done可以判断Generator函数是否执行完毕。</li></ol><p>一、switch 模拟 缺点需要每次传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gen$</span>(<span class="params">nextStep</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (nextStep) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result1&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result2&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result3&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">gen$</span>(<span class="number">2</span>)); <span class="comment">// result2</span></span><br></pre></td></tr></table></figure><p>二、闭包，无需传参，调用一次，执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gen$2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> nextStep = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (nextStep) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          nextStep = <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;result1&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          nextStep = <span class="number">4</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;result2&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">          nextStep = <span class="number">6</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;result3&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">gen$2</span>()</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// result1</span></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// result2</span></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// result3</span></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>三、使用全局变量控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">prev</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gen$</span>(<span class="params">_context</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (_context.<span class="property">prev</span> = _context.<span class="property">next</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        _context.<span class="property">next</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result1&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        _context.<span class="property">next</span> = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result2&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        _context.<span class="property">next</span> = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result3&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、next()方法改变执行步骤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">prev</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gen$</span>(<span class="params">_context</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (_context.<span class="property">prev</span> = _context.<span class="property">next</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        _context.<span class="property">next</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result1&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        _context.<span class="property">next</span> = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result2&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        _context.<span class="property">next</span> = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result3&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      value = <span class="title function_">gen$</span>(context);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五、添加状态和改变状态并返回一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">gen$</span>(<span class="params">_context</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (_context.<span class="property">prev</span> = _context.<span class="property">next</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        _context.<span class="property">next</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result1&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        _context.<span class="property">next</span> = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result2&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        _context.<span class="property">next</span> = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;result3&#x27;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;end&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> _context.<span class="title function_">stop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">prev</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">stop</span>: <span class="keyword">function</span> <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">done</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gen = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      value = context.<span class="property">done</span> ? <span class="literal">undefined</span> : <span class="title function_">gen$</span>(context)</span><br><span class="line">      done = context.<span class="property">done</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value,</span><br><span class="line">        done</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>())</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://juejin.cn/post/6844904096525189128#heading-14">https://juejin.cn/post/6844904096525189128#heading-14</a><br><a href="https://zhuanlan.zhihu.com/p/216060145">https://zhuanlan.zhihu.com/p/216060145</a></p>]]></content>
    
    <summary type="html">
    
      浅谈async,await和generator函数原理。
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/javascript/"/>
    
    
      <category term="async" scheme="https://github.com/joydezhong/joydezhong.github.io.git/tags/async/"/>
    
      <category term="await" scheme="https://github.com/joydezhong/joydezhong.github.io.git/tags/await/"/>
    
      <category term="generator" scheme="https://github.com/joydezhong/joydezhong.github.io.git/tags/generator/"/>
    
  </entry>
  
  <entry>
    <title>简单的实现手写Promise</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/11/12/promise/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/11/12/promise/</id>
    <published>2021-11-12T13:44:00.000Z</published>
    <updated>2025-03-26T03:21:50.874Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在前端工作中，Promise是必不可以，在面试过程中当然也是必考的知识点之一，甚至更有，直接给出一张白纸，请手写一个Promise。</p><p>1、两个状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initValue</span>()</span><br><span class="line">    <span class="comment">// 初始化this指向</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initBind</span>()</span><br><span class="line">    <span class="comment">// 执行回调传进来的函数</span></span><br><span class="line">    <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>)    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initBind</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolve</span> = <span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reject</span> = <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span> <span class="comment">// promise结果值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 等待中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 若执行resolve，状态变为fulfilled</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="comment">// 若执行reject，状态变更为rejected</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = reason</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、状态不可逆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initValue</span>()</span><br><span class="line">    <span class="comment">// 初始化this指向</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initBind</span>()</span><br><span class="line">    <span class="comment">// 执行回调传进来的函数</span></span><br><span class="line">    <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>)    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initBind</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolve</span> = <span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reject</span> = <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span> <span class="comment">// promise结果值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 等待中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 状态不可逆</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 若执行resolve，状态变为fulfilled</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="comment">// 状态不可变逆</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 若执行reject，状态变更为rejected</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = reason</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、出现异常，状态rejected</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initValue</span>()</span><br><span class="line">    <span class="comment">// 初始化this指向</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initBind</span>()</span><br><span class="line">    <span class="comment">// 捕获异常 状态变为rejected</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 执行回调传进来的函数</span></span><br><span class="line">      <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>)    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reject</span>(error) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initBind</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolve</span> = <span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reject</span> = <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span> <span class="comment">// promise结果值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 等待中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 状态不可变更</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 若执行resolve，状态变为fulfilled</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="comment">// 状态不可变更</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 若执行reject，状态变更为rejected</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = reason</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、then的两个回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="title function_">then</span>(<span class="params">onFulFilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">// 校验then参数函数的类型</span></span><br><span class="line">  onFulFilled = <span class="keyword">typeof</span> onFulFilled === <span class="string">&#x27;function&#x27;</span> ? onFulFilled : <span class="function"><span class="params">val</span> =&gt;</span> val</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 成功状态执行成功回调</span></span><br><span class="line">    <span class="title function_">onFulFilled</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure><p>5、支持异步和多次调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initValue</span>()</span><br><span class="line">    <span class="comment">// 初始化this指向</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initBind</span>()</span><br><span class="line">    <span class="comment">// 捕获异常 状态变为rejected</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallback</span> = [];<span class="comment">//成功的回调数组</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallback</span> = []; <span class="comment">//失败的回调数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 执行回调传进来的函数</span></span><br><span class="line">      <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>)    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reject</span>(error) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initBind</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolve</span> = <span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reject</span> = <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span> <span class="comment">// promise结果值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 等待中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 状态不可变更</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 若执行resolve，状态变为fulfilled</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = value</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="comment">// 状态不可变更</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 若执行reject，状态变更为rejected</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = reason</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(reason))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulFilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">// 校验then参数函数的类型</span></span><br><span class="line">    onFulFilled = <span class="keyword">typeof</span> onFulFilled === <span class="string">&#x27;function&#x27;</span> ? onFulFilled : <span class="function"><span class="params">val</span> =&gt;</span> val</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 成功状态执行成功回调</span></span><br><span class="line">      <span class="title function_">onFulFilled</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">PromiseResult</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">typeof</span> onFulFilled === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">onFulfilledCallback</span>.<span class="title function_">push</span>(onFulFilled)</span><br><span class="line">      <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">onRejectedCallback</span>.<span class="title function_">push</span>(onRejected)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、链式回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initValue</span>()</span><br><span class="line">    <span class="comment">// 初始化this指向</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initBind</span>()</span><br><span class="line">    <span class="comment">// 捕获异常 状态变为rejected</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallback</span> = [];<span class="comment">//成功的回调数组</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallback</span> = []; <span class="comment">//失败的回调数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 执行回调传进来的函数</span></span><br><span class="line">      <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>)    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reject</span>(error) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initBind</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolve</span> = <span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reject</span> = <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span> <span class="comment">// promise结果值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 等待中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 状态不可变更</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 若执行resolve，状态变为fulfilled</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = value</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="comment">// 状态不可变更</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 若执行reject，状态变更为rejected</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = reason</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(reason))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulFilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">// 校验then参数函数的类型</span></span><br><span class="line">    onFulFilled = <span class="keyword">typeof</span> onFulFilled === <span class="string">&#x27;function&#x27;</span> ? onFulFilled : <span class="function"><span class="params">val</span> =&gt;</span> val</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要实现链式调用，需要在then函数中返回一个Promise并且做对应的参数判断</span></span><br><span class="line">    <span class="keyword">const</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(_this.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onFulFilled</span>(_this.<span class="property">PromiseResult</span>)</span><br><span class="line">            _this.<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)    </span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(_this.<span class="property">PromiseState</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(_this.<span class="property">PromiseResult</span>)</span><br><span class="line">            _this.<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)    </span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(_this.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        _this.<span class="property">onFulfilledCallback</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = <span class="title function_">onFulFilled</span>(_this.<span class="property">PromiseResult</span>)</span><br><span class="line">              _this.<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)    </span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">              <span class="title function_">reject</span>(error)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        _this.<span class="property">onRejectedCallback</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(_this.<span class="property">PromiseResult</span>)</span><br><span class="line">              _this.<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">              <span class="title function_">reject</span>(error)</span><br><span class="line">            &#125;  </span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">新的promise对象</span>&#125; promise2 </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">上一个then的返回值</span>&#125; x </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">promise2的resolve</span>&#125; resolve </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">promise2的reject</span>&#125; reject </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(promise2 === x) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Chaining cycle.&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &amp;&amp; <span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> used;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> then = x.<span class="property">then</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">          then.<span class="title function_">call</span>(x, <span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(used) <span class="keyword">return</span>;</span><br><span class="line">            used = <span class="literal">true</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">resolvePromise</span>(promise2, y, resolve, reject)</span><br><span class="line">          &#125;, <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(used) <span class="keyword">return</span>;</span><br><span class="line">            used = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">reject</span>(r)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(used) <span class="keyword">return</span>;</span><br><span class="line">          used = <span class="literal">true</span></span><br><span class="line">          <span class="title function_">resolve</span>(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">if</span>(used) <span class="keyword">return</span>;</span><br><span class="line">        used = <span class="literal">true</span></span><br><span class="line">        <span class="title function_">reject</span>(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、其他方法</p><p>7.1、all</p><ol><li>接收一个promise数组，若数组中有非promise项，当此项为成功。</li><li>promise数组全部执行成功，则返回结果数组；有一项失败，则返回此项失败的结果。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="comment">// 结果数组</span></span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">index, value</span>) =&gt; &#123;</span><br><span class="line">      result[index] = value</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) <span class="title function_">resolve</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(index, res)</span><br><span class="line">        &#125;, <span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">reject</span>(error))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.2、race</p><ol><li>接收一个promise数组，若数组中有非promise项，当此项为成功。</li><li>哪个Promise最快得到结果，就返回那个结果，无论成功失败。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">promise</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(promise)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.3、allSettled</p><ol><li>接收一个promise数组，若数组中有非promise项，当此项为成功。</li><li>把每一项Promise执行完结果的状态值，组合成数组返回。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">allSettled</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">status, value, i</span>) =&gt; &#123;</span><br><span class="line">      result[i] = &#123;</span><br><span class="line">        status,</span><br><span class="line">        value</span><br><span class="line">      &#125;</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(<span class="string">&#x27;fulfilled&#x27;</span>, res, i)</span><br><span class="line">        &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">addData</span>(<span class="string">&#x27;rejected&#x27;</span>, error, i)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">addData</span>(<span class="string">&#x27;fulfilled&#x27;</span>, promise, i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.4、any</p><ol><li>any和all相反，接收一个promise数组，若数组中有非promise项，当此项为成功。</li><li>若有一项执行成功，则返回成功的结果；若所有的都失败，则抛出Error错误</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">      promise.<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(val)</span><br><span class="line">      &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(<span class="string">&#x27;All promises were rejected&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      简单的实现手写Promise原理。
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/javascript/"/>
    
    
      <category term="Promise" scheme="https://github.com/joydezhong/joydezhong.github.io.git/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>如何开始一个脚手架工程项目</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/10/28/%E6%89%8B%E5%86%99%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/10/28/%E6%89%8B%E5%86%99%E8%84%9A%E6%89%8B%E6%9E%B6/</id>
    <published>2021-10-28T11:44:00.000Z</published>
    <updated>2025-03-26T03:21:52.025Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、-初始化一个npm项目">一、 初始化一个npm项目</h3><p>手动创建 package.json，自行键入&quot;name、version、description、main&quot;等字段。</p><p>npm init自动生成package.json。</p><p>这里介绍下main字段的作用，看到很多文章都说“指定主入口文件”，却很少看到有详细说明的。</p><p>学过c语言的应该了解，程序的执行有个main函数，这个main函数是程序的唯一执行入口，而package.json中的main含义类似，当这个项目作为npm包给被他人安装使用时，他人引用你的模块全部从main指引的模块导出，这相对于他人即为主入口，但相对于自己项目即为主出口。</p><h3 id="二、模块查找">二、模块查找</h3><p>在node中以<code>require(m)</code>的方式引入模块，那么这种引入方式是如何查找模块的呢？</p><p>如果 m 是node的核心模块名，直接返回核心模块。</p><p><strong>如果 m 以<code>/ ./ ../</code>方式开头的：</strong><br>计算 m 的绝对路径 p；<br>如果 p 是文件，尝试以该文件的类型加载，成功则返回；<br>如果 p.js 是文件，当作 CommonJS 脚本加载，成功则返回；<br>如果 p.json 是文件，当作 json 文件加载，成功则返回；<br>如果 p.node 是文件，当作原生扩展模块加载，成功则返回；<br><strong>以上都不成功，把 p 当作目录：</strong><br>如果 p/package.json 是文件，找里面的 main 字段；<br>如果没有 main 字段，尝试加载 p/index.js p/index.json p/index.node；<br>如果有 main 字段；<br>计算 main 绝对路径 q，按上面的规则当作文件尝试加载<br>如果都失败，尝试 q/index.js q/index.json q/index.node<br>如果 q/package.json 不是文件，尝试加载 q/index.js q/index.json q/index.node<br>以上都不成功，throw not found</p><h3 id="三、如何运行自定义命令">三、如何运行自定义命令</h3><p>如何运行自定义命令，而不是使用node xxx，这时候就需要用到第一小节package.json中的bin字段了。</p><p>在node项目中，可以把Js文件当做shell脚本来执行，只需要在文件开头标明<code>#! /usr/bin/env node</code>表示使用nodejs解析。</p><p>下面来实现一个用自定义命令输出参数的小案例：</p><ol><li>新建/lib/echo.js，</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// echo.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>新建/bin/node-echo.js，</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> argv = <span class="built_in">require</span>(<span class="string">&#x27;argv&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> echo = <span class="built_in">require</span>(<span class="string">&#x27;../lib/echo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">echo</span>(argv.<span class="title function_">run</span>().<span class="property">targets</span>.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)));</span><br></pre></td></tr></table></figure><ol start="3"><li>配置bin命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="string">&quot;bin&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;node-echo&quot;</span>: <span class="string">&quot;./bin/node-echo.js&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>此时在终端运行node-echo命令是无效的，还需要通过<code>npm link</code>进行本地开发连接，当然，也可以在link后面指定模块名称，这时候指定的模块就会引入到当前项目的node_modules下面。</p><h3 id="四、如何进行命令行交互">四、如何进行命令行交互</h3><p>这里需要使用到相关工具包：命令行工具commander、交互工具inquirer、参数工具argv，借助这三个工具，我们可以实现输出项目版本信息，获取命令help提示，交互选择的功能。</p><ol><li>编辑node-echo.js，</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="comment">// 命令行工具</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>);</span><br><span class="line"><span class="comment">// 命令交互工具</span></span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEMPLATE_ENUM</span> = <span class="built_in">require</span>(<span class="string">&#x27;../lib/template/templateEnum.json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; version &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出版本信息和help提示</span></span><br><span class="line">program.<span class="title function_">version</span>(version, <span class="string">&#x27;-v, --version&#x27;</span>) </span><br><span class="line">.<span class="title function_">usage</span>(<span class="string">&#x27;&lt;command&gt; [options]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">program.<span class="title function_">command</span>(<span class="string">&#x27;create&#x27;</span>)</span><br><span class="line">.<span class="title function_">description</span>(<span class="string">&#x27;创建一个项目模板&#x27;</span>)</span><br><span class="line">.<span class="title function_">action</span>(<span class="title function_">async</span> (cmd) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; template &#125; = <span class="keyword">await</span> inquirer.<span class="title function_">prompt</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;template&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;选择要使用的模板&#x27;</span>,</span><br><span class="line">      <span class="attr">choices</span>: <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable constant_">TEMPLATE_ENUM</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你选择了：&#x27;</span>,template)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 把命令行参数传给commander解析</span></span><br><span class="line">program.<span class="title function_">parse</span>(process.<span class="property">argv</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>模板枚举可以根据需要自行定制json格式，</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// templateEnum.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;pc&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;download&quot;</span>: <span class="string">&quot;xxxxxx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gitUrl&quot;</span>: <span class="string">&quot;xxxxxx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;repoName&quot;</span>: <span class="string">&quot;template_PC&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;nativeApp&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;download&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;miniApp&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;download&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五、拉取远程仓库代码到本地</p><p>这节拉取远程代码，涉及比较多的边界处理，仅列举部分伪代码以做说明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createTemplate.js</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">create</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// 项目name、创建路径和git仓库一些信息</span></span><br><span class="line">  <span class="keyword">const</span> &#123; name, mkdir, gitRepo &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`⠋`</span>, <span class="string">`下载模板中, 请稍候...`</span>);</span><br><span class="line">    <span class="comment">// 返回临时数据目录</span></span><br><span class="line">    tmpdir = <span class="keyword">await</span> <span class="title function_">fetchRemotePreset</span>(gitRepo[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">` 下载失败`</span>);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将接收的模板文件 传入到目标目录中</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fs.<span class="title function_">copySync</span>(tmpdir, context, &#123;</span><br><span class="line">      <span class="attr">filter</span>: <span class="function">(<span class="params">src, dest</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path.<span class="title function_">basename</span>(src, <span class="string">&#x27;.git&#x27;</span>) !== gitRepo.<span class="property">repoName</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在正式执远程下载前还有很多校验处理，比如： node版本是否符合要求，项目名称是否符合命名要求，当前创建目录是否为空等等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loadRemoteProject.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs-extra&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchRemotePreset</span>(<span class="params">name, clone = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">&#x27;./gitDownloadRepo&#x27;</span>);</span><br><span class="line">  <span class="comment">// 生成临时目录, 方便后续中间件对其抓取下来的模板进行处理</span></span><br><span class="line">  <span class="keyword">const</span> tmpdir = path.<span class="title function_">resolve</span>(os.<span class="title function_">tmpdir</span>(), <span class="string">&#x27;node-echo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将临时目录的内容先清空， 否则无法写入正常的拉取后的文件</span></span><br><span class="line">  <span class="keyword">await</span> fs.<span class="title function_">remove</span>(tmpdir);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">download</span>(name, tmpdir, &#123; clone &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>(tmpdir);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>借助一些工具包，对远程项目下载，由于安全机制问题，先下载到对应的系统临时文件下，再通过fs模块复制到对应的项目目录中去。</p><p>此外，还需要一些终端字符输出美化，终端清空，版本升级提示等，才能让这个脚手架工具更加完美。</p><p>详细代码参考：<a href="https://github.com/joydezhong/simpleCli-template.git">https://github.com/joydezhong/simpleCli-template.git</a></p>]]></content>
    
    <summary type="html">
    
      手写一个简单的，类似于create-raeat-app的脚手架工具。
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="nodeJs" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/nodeJs/"/>
    
    
      <category term="NodeJs" scheme="https://github.com/joydezhong/joydezhong.github.io.git/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>测试文章加密</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/07/31/test/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/07/31/test/</id>
    <published>2021-07-31T13:20:01.000Z</published>
    <updated>2025-03-26T03:21:50.927Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="11ecbc52769c9f01aecb97d8dcc7b9192a2fdd99b82077e20ee90b4c803269ad">7699f367a59183450d54e43eff6f97badd5984ff371b1016d5fc58d3c13c2da34cbb1f123974c9646d97eb9378d46f3d991c7947b7c8df976fc011abc109ff5ebde615f246700090507c216767a8a689e95209a23239918099d1f6bb3468264237517566642c4c5f7e2520da163747a17a031ed23d975fe10fc8d9edb30abd9fabdd032b0c4e000478b71337540fb26b604b3a794735dd89891d0b0ef5e3744cf82e429ae54bca6271366f0894a7473e0f5e4f5783e0a0bc4912162218175888e94e8aba8c600256e01c867d972795f0b1a1c448745c1ec88b04ece6966c2901f3be00db4b6bc6bc0926d5d525a865befc27eb3123af913342f3a4dd46e1b593b518262dd5bffe772c907f0433591c0ddaa434277fd788d08f9c98475cf50e19002b5b23ed6d2bdfa6056ceef546f337</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">欢迎点开这篇文章，请校验密码后阅读。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      山不在高有仙则灵文不在深有密则读。
    
    </summary>
    
    
      <category term="生活杂录" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E5%BD%95/"/>
    
    
      <category term="人生" scheme="https://github.com/joydezhong/joydezhong.github.io.git/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>antd源码解析之Avatar</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/07/23/antd_avatar/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/07/23/antd_avatar/</id>
    <published>2021-07-23T13:02:00.000Z</published>
    <updated>2025-03-26T03:21:50.685Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Avatar音译‘阿凡达’，释义头像或某事物的化身，支持文字、Icon、图片、远程图片，解析源码前先来看看所需参数。</p><p><strong>Avatar作为独立组件时：</strong></p><h2 id="API参数">API参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">AvatarProps</span> &#123;</span><br><span class="line">  <span class="comment">/** 指定头像形状：圆形，方形 */</span></span><br><span class="line">  shape?: <span class="string">&#x27;circle&#x27;</span> | <span class="string">&#x27;square&#x27;</span>;</span><br><span class="line">  <span class="comment">/** 指定头像大小：大，小，默认 */</span></span><br><span class="line">  size?: <span class="title class_">AvatarSize</span>;</span><br><span class="line">  <span class="comment">/** 字符类型距离左右两侧边界单位像素 */</span></span><br><span class="line">  gap?: number;</span><br><span class="line">  <span class="comment">/** 图片资源路径或图片元素 */</span></span><br><span class="line">  src?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="comment">/** 图片资源链接 */</span></span><br><span class="line">  srcSet?: string;</span><br><span class="line">  <span class="comment">/** 图片是否拖拽 */</span></span><br><span class="line">  draggable?: boolean;</span><br><span class="line">  <span class="comment">/** 头像的Icon图标 */</span></span><br><span class="line">  icon?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  style?: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">  prefixCls?: string;</span><br><span class="line">  className?: string;</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="comment">/** 图片加载失败的替换文字 */</span></span><br><span class="line">  alt?: string;</span><br><span class="line">  <span class="comment">/** 图片加载失败的回调 */</span></span><br><span class="line">  onError?: <span class="function">() =&gt;</span> boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部分主要代码">部分主要代码</h2><p>这个组件采用函数式编程的写法，在这只列举部分主要的代码，一些动态css代码以省略号代替，完整源码请参考官方库。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">InternalAvatar</span>: <span class="title class_">React</span>.<span class="property">ForwardRefRenderFunction</span>&lt;unknown, <span class="title class_">AvatarProps</span>&gt; = <span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/** 组内嵌套使用时 Group中Context的size */</span></span><br><span class="line">  <span class="keyword">const</span> groupSize = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">SizeContext</span>);</span><br><span class="line">  <span class="keyword">const</span> [scale, setScale] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> [mounted, setMounted] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [isImgExist, setIsImgExist] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> avatarNodeRef = <span class="title class_">React</span>.<span class="property">useRef</span>&lt;<span class="title class_">HTMLElement</span>&gt;();</span><br><span class="line">  <span class="keyword">const</span> avatarChildrenRef = <span class="title class_">React</span>.<span class="property">useRef</span>&lt;<span class="title class_">HTMLElement</span>&gt;();</span><br><span class="line">  <span class="keyword">const</span> avatarNodeMergeRef = <span class="title function_">composeRef</span>(ref, avatarNodeRef);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; getPrefixCls &#125; = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">ConfigContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setScaleParam</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!avatarChildrenRef.<span class="property">current</span> || !avatarNodeRef.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> childrenWidth = avatarChildrenRef.<span class="property">current</span>.<span class="property">offsetWidth</span>;</span><br><span class="line">    <span class="keyword">const</span> nodeWidth = avatarNodeRef.<span class="property">current</span>.<span class="property">offsetWidth</span>;</span><br><span class="line">    <span class="keyword">if</span> (childrenWidth !== <span class="number">0</span> &amp;&amp; nodeWidth !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; gap = <span class="number">4</span> &#125; = props;</span><br><span class="line">      <span class="keyword">if</span> (gap * <span class="number">2</span> &lt; nodeWidth) &#123;</span><br><span class="line">        <span class="title function_">setScale</span>(nodeWidth - gap * <span class="number">2</span> &lt; childrenWidth ? (nodeWidth - gap * <span class="number">2</span>) / childrenWidth : <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setMounted</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setIsImgExist</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">setScale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;, [props.<span class="property">src</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setScaleParam</span>();</span><br><span class="line">  &#125;, [props.<span class="property">gap</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleImgLoadError</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; onError &#125; = props;</span><br><span class="line">    <span class="keyword">const</span> errorFlag = onError ? <span class="title function_">onError</span>() : <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">if</span> (errorFlag !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="title function_">setIsImgExist</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">prefixCls</span>: customizePrefixCls,</span><br><span class="line">    shape,</span><br><span class="line">    <span class="attr">size</span>: customSize,</span><br><span class="line">    src,</span><br><span class="line">    srcSet,</span><br><span class="line">    icon,</span><br><span class="line">    className,</span><br><span class="line">    alt,</span><br><span class="line">    draggable,</span><br><span class="line">    children,</span><br><span class="line">    ...others</span><br><span class="line">  &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> size = customSize === <span class="string">&#x27;default&#x27;</span> ? groupSize : customSize;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> screens = <span class="title function_">useBreakpoint</span>();</span><br><span class="line">  <span class="comment">// ...responsiveSizeStyle...</span></span><br><span class="line">  <span class="comment">// ...devWarning...</span></span><br><span class="line">  <span class="comment">// ...prefixCls...</span></span><br><span class="line">  <span class="comment">// ...sizeCls...</span></span><br><span class="line">  <span class="keyword">const</span> hasImageElement = <span class="title class_">React</span>.<span class="title function_">isValidElement</span>(src);</span><br><span class="line">  <span class="comment">// ...classString...</span></span><br><span class="line">  <span class="comment">// ...sizeStyle...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> childrenToRender;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> src === <span class="string">&#x27;string&#x27;</span> &amp;&amp; isImgExist) &#123;</span><br><span class="line">    childrenToRender = (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;src&#125;</span> <span class="attr">draggable</span>=<span class="string">&#123;draggable&#125;</span> <span class="attr">srcSet</span>=<span class="string">&#123;srcSet&#125;</span> <span class="attr">onError</span>=<span class="string">&#123;handleImgLoadError&#125;</span> <span class="attr">alt</span>=<span class="string">&#123;alt&#125;</span> /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasImageElement) &#123;</span><br><span class="line">    childrenToRender = src;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (icon) &#123;</span><br><span class="line">    childrenToRender = icon;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mounted || scale !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> transformString = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>) translateX(-50%)`</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">childrenStyle</span>: <span class="title class_">React</span>.<span class="property">CSSProperties</span> = &#123;</span><br><span class="line">      <span class="attr">msTransform</span>: transformString,</span><br><span class="line">      <span class="title class_">WebkitTransform</span>: transformString,</span><br><span class="line">      <span class="attr">transform</span>: transformString,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">sizeChildrenStyle</span>: <span class="title class_">React</span>.<span class="property">CSSProperties</span> =</span><br><span class="line">      <span class="keyword">typeof</span> size === <span class="string">&#x27;number&#x27;</span></span><br><span class="line">        ? &#123;</span><br><span class="line">            <span class="attr">lineHeight</span>: <span class="string">`<span class="subst">$&#123;size&#125;</span>px`</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    childrenToRender = (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ResizeObserver</span> <span class="attr">onResize</span>=<span class="string">&#123;setScaleParam&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-string</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;(node:</span> <span class="attr">HTMLElement</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            avatarChildrenRef.current = node;</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          style=&#123;&#123; ...sizeChildrenStyle, ...childrenStyle &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ResizeObserver</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    childrenToRender = (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-string</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">opacity:</span> <span class="attr">0</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;(node:</span> <span class="attr">HTMLElement</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          avatarChildrenRef.current = node;</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> others.<span class="property">onError</span>;</span><br><span class="line">  <span class="keyword">delete</span> others.<span class="property">gap</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...others</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">...sizeStyle</span>, <span class="attr">...responsiveSizeStyle</span>, <span class="attr">...others.style</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;classString&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;avatarNodeMergeRef</span> <span class="attr">as</span> <span class="attr">any</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;childrenToRender&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Avatar</span> = <span class="title class_">React</span>.<span class="property">forwardRef</span>&lt;unknown, <span class="title class_">AvatarProps</span>&gt;(<span class="title class_">InternalAvatar</span>);</span><br><span class="line"><span class="title class_">Avatar</span>.<span class="property">displayName</span> = <span class="string">&#x27;Avatar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Avatar</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">shape</span>: <span class="string">&#x27;circle&#x27;</span> <span class="keyword">as</span> <span class="title class_">AvatarProps</span>[<span class="string">&#x27;shape&#x27;</span>],</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;default&#x27;</span> <span class="keyword">as</span> <span class="title class_">AvatarProps</span>[<span class="string">&#x27;size&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Avatar</span>;</span><br></pre></td></tr></table></figure><p>① 使用<code>React.forwardRef</code>接收一个函数式组件InternalAvatar，两个参数props、ref，这个React API可以把ref转发到组件树的任意一个组件中，在组件树的任意组件中即可操作父组件传过来的ref。<br>② 使用<code>React.isValidElement</code>方法验证是否是react图片元素，通过ResizeObserver组件的api回调来计算缩放比例，实现响应式尺寸。<br>③ 当传入的参数不在约定规则之内时，渲染对应的children，并置为透明隐藏。</p><p><strong>与Avatar.Group嵌套使用时：</strong></p><h3 id="API参数-2">API参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">GroupProps</span> &#123;</span><br><span class="line">  className?: string;</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  style?: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">  prefixCls?: string;</span><br><span class="line">  <span class="comment">/** 显示的最大头像个数 */</span></span><br><span class="line">  maxCount?: number;</span><br><span class="line">  <span class="comment">/** 多余头像样式 */</span></span><br><span class="line">  maxStyle?: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">  <span class="comment">/** 多余头像气泡弹出位置 */</span></span><br><span class="line">  maxPopoverPlacement?: <span class="string">&#x27;top&#x27;</span> | <span class="string">&#x27;bottom&#x27;</span>;</span><br><span class="line">  <span class="comment">/** 自定义组内头像的大小 */</span></span><br><span class="line">  size?: <span class="title class_">AvatarSize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Group中代码相对较少，这里全部列举出来，有两点需要分析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Group</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">GroupProps</span>&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getPrefixCls, direction &#125; = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">ConfigContext</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">prefixCls</span>: customizePrefixCls, className = <span class="string">&#x27;&#x27;</span>, maxCount, maxStyle, size &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> prefixCls = <span class="title function_">getPrefixCls</span>(<span class="string">&#x27;avatar-group&#x27;</span>, customizePrefixCls);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cls = <span class="title function_">classNames</span>(</span><br><span class="line">    prefixCls,</span><br><span class="line">    &#123;</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-rtl`</span>]: direction === <span class="string">&#x27;rtl&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    className,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; children, maxPopoverPlacement = <span class="string">&#x27;top&#x27;</span> &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> childrenWithProps = <span class="title function_">toArray</span>(children).<span class="title function_">map</span>(<span class="function">(<span class="params">child, index</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">cloneElement</span>(child, &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">`avatar-key-<span class="subst">$&#123;index&#125;</span>`</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> numOfChildren = childrenWithProps.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (maxCount &amp;&amp; maxCount &lt; numOfChildren) &#123;</span><br><span class="line">    <span class="keyword">const</span> childrenShow = childrenWithProps.<span class="title function_">slice</span>(<span class="number">0</span>, maxCount);</span><br><span class="line">    <span class="keyword">const</span> childrenHidden = childrenWithProps.<span class="title function_">slice</span>(maxCount, numOfChildren);</span><br><span class="line">    childrenShow.<span class="title function_">push</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Popover</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">key</span>=<span class="string">&quot;avatar-popover-key&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">content</span>=<span class="string">&#123;childrenHidden&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">trigger</span>=<span class="string">&quot;hover&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placement</span>=<span class="string">&#123;maxPopoverPlacement&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">overlayClassName</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-popover</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">style</span>=<span class="string">&#123;maxStyle&#125;</span>&gt;</span>&#123;`+$&#123;numOfChildren - maxCount&#125;`&#125;<span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Popover</span>&gt;</span></span>,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">SizeContextProvider</span> <span class="attr">size</span>=<span class="string">&#123;size&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;cls&#125;</span> <span class="attr">style</span>=<span class="string">&#123;props.style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;childrenShow&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SizeContextProvider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">SizeContextProvider</span> <span class="attr">size</span>=<span class="string">&#123;size&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;cls&#125;</span> <span class="attr">style</span>=<span class="string">&#123;props.style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;childrenWithProps&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">SizeContextProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Group</span>;</span><br></pre></td></tr></table></figure><p>① 利用<code>props.children</code>获取组件的子链，对子链（react元素）遍历，然后使用<code>React.cloneElement()</code>方法以子链元素为样本克隆一份，可以把新传入的props和旧的props进行合并。<br>② 父组件使用Context保存size配置，下面子组件Avatar可以使用Group中的size数据。</p>]]></content>
    
    <summary type="html">
    
      antdesign源码解析之Avatar
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/react/"/>
    
    
  </entry>
  
  <entry>
    <title>前端自动化部署方案二</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/07/02/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BA%8C/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/07/02/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BA%8C/</id>
    <published>2021-07-02T12:40:00.000Z</published>
    <updated>2025-03-26T03:21:52.152Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是<a href="http://www.zhongweipeng.cn/2021/06/02/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%B8%80/">前端自动化部署方案一</a>windows系统的姊妹篇Linux系统自动化部署解决方案，不得不说，Linux在这里的优势显而易见。</p><h2 id="服务端">服务端</h2><p>更新并升级安装源，安装ssh服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>启动服务后，需要设置用户名密码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh <span class="built_in">start</span>  启动服务</span><br><span class="line">sudo service ssh stop  关闭服务</span><br><span class="line">sudo service sshd reload  [停止进程后重启] ==&gt; 推荐</span><br><span class="line">sudo service sshd restart  [干掉进程后重启] ==&gt; 不推荐</span><br></pre></td></tr></table></figure><h2 id="客户端">客户端</h2><p>利用<code>node-ssh</code>进行SSH连接、文件传输、远程执行shell脚本，利用<code>archiver</code>执行文件压缩操作。</p><p>1.导入模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> archiver = <span class="built_in">require</span>(<span class="string">&#x27;archiver&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">NodeSSH</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;node-ssh&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2.初始化ssh和配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ssh = <span class="keyword">new</span> <span class="title class_">NodeSSH</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">/**路径 */</span></span><br><span class="line">  <span class="attr">path</span>: &#123;</span><br><span class="line">    <span class="attr">romotePath</span>: <span class="string">&#x27;/home/dalao/Projects/www&#x27;</span>,</span><br><span class="line">    <span class="attr">localPath</span>: <span class="string">&#x27;./build&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**压缩文件名 */</span></span><br><span class="line">  <span class="attr">compressName</span>: <span class="string">&#x27;Compression.zip&#x27;</span>,</span><br><span class="line">  <span class="comment">/**远程连接配置 */</span></span><br><span class="line">  <span class="attr">romote</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;10.0.0.87&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;dalao&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.压缩文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createZip</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;压缩中...&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//  创建最终打包文件的输出流</span></span><br><span class="line">      <span class="keyword">const</span> output = fs.<span class="title function_">createWriteStream</span>(<span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span>/Compression.zip`</span>)</span><br><span class="line">      <span class="comment">// 生成archiver对象，打包类型为zip</span></span><br><span class="line">      <span class="keyword">const</span> archive = <span class="title function_">archiver</span>(<span class="string">&#x27;zip&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">zlib</span>: &#123; <span class="attr">level</span>: <span class="number">9</span> &#125; <span class="comment">// Sets the compression level.</span></span><br><span class="line">      &#125;);</span><br><span class="line">      output.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;压缩失败：&#x27;</span> + e)</span><br><span class="line">          <span class="title function_">reject</span>(e)</span><br><span class="line">          process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Compression.zip 打包成功&#x27;</span>)</span><br><span class="line">          <span class="title function_">resolve</span>(&#123;<span class="attr">code</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;开始装载上传...&#x27;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 将打包对象与输出流关联</span></span><br><span class="line">      archive.<span class="title function_">pipe</span>(output)</span><br><span class="line">      <span class="comment">// 从子目录追加文件，将其内容放在archive的根目录</span></span><br><span class="line">      archive.<span class="title function_">directory</span>(config.<span class="property">path</span>.<span class="property">localPath</span>, <span class="literal">false</span>)</span><br><span class="line">      <span class="comment">// 结束archive</span></span><br><span class="line">      archive.<span class="title function_">finalize</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;压缩失败：&#x27;</span> + e)</span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.远程部署</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 远程连接 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">remoteConnect</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    ssh.<span class="title function_">connect</span>(config.<span class="property">romote</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 清除服务器缓存 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clearServer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    ssh.<span class="title function_">execCommand</span>(<span class="string">`rm -rf <span class="subst">$&#123;config.path.romotePath&#125;</span>/*`</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**上传文件夹（不用压缩包）*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">uploadDir</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    ssh.<span class="title function_">putDirectory</span>(config.<span class="property">path</span>.<span class="property">localPath</span>, config.<span class="property">path</span>.<span class="property">romotePath</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**上传压缩包 解压并删除压缩包 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">uploadFileAndUnzip</span> = (<span class="params">localPath, remotePath</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    ssh.<span class="title function_">putFile</span>(localPath, remotePath).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//@ 这里也可用用执行远程shell脚本替代</span></span><br><span class="line">      <span class="comment">// #!/bin/bash</span></span><br><span class="line">      <span class="comment">// cd /usr1/AAA/mydemo</span></span><br><span class="line">      <span class="comment">// #删除原静态资源目录</span></span><br><span class="line">      <span class="comment">// rm -rf public</span></span><br><span class="line">      <span class="comment">// cd /usr1/AAA</span></span><br><span class="line">      <span class="comment">// #解压新的包</span></span><br><span class="line">      <span class="comment">// unzip public.zip</span></span><br><span class="line">      <span class="comment">// #将解压出的public目录移动到服务端程序目录BBB中</span></span><br><span class="line">      <span class="comment">// mv public ./mydemo</span></span><br><span class="line">      ssh.<span class="title function_">execCommand</span>(<span class="string">`unzip <span class="subst">$&#123;config.compressName&#125;</span>; rm -rf <span class="subst">$&#123;config.compressName&#125;</span>`</span>, &#123; <span class="attr">cwd</span>: config.<span class="property">path</span>.<span class="property">romotePath</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123; <span class="attr">code</span>: <span class="number">1</span> &#125;)</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(err)  </span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">createZip</span>()</span><br><span class="line">  <span class="keyword">if</span>(res[<span class="string">&#x27;code&#x27;</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> connectRes = <span class="keyword">await</span> <span class="title function_">remoteConnect</span>()</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">clearServer</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;远程连接中...&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(connectRes[<span class="string">&#x27;code&#x27;</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功，文件上传中...&#x27;</span>)</span><br><span class="line">      <span class="comment">// const uploadRes = await uploadDir()</span></span><br><span class="line">      <span class="keyword">const</span> uploadRes = <span class="keyword">await</span> <span class="title function_">uploadFileAndUnzip</span>(<span class="string">`./<span class="subst">$&#123;config.compressName&#125;</span>`</span>, <span class="string">`<span class="subst">$&#123;config.path.romotePath&#125;</span>/<span class="subst">$&#123;config.compressName&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">if</span>(uploadRes[<span class="string">&#x27;code&#x27;</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件上传成功&#x27;</span>)</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 执行主函数 */</span></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端自动化部署方案二之Linux ubuntu服务器
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/react/"/>
    
    
  </entry>
  
  <entry>
    <title>antd源码解析之Calendar</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/06/26/antd_calendar/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/06/26/antd_calendar/</id>
    <published>2021-06-26T02:25:00.000Z</published>
    <updated>2025-03-26T03:21:50.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Calendar日历，有传统可添加日程的方格形式，也有卡片的mini模式。</p><p>要解析这个组件，首先来看看它引入了哪些工具：<br>① 引入了<code>moment</code>的typescript接口。<br>② 基于<code>rc-picker</code>组件，还引入了包括其组件在内的一些ts类型和工具函数。<br>③ 引入了<code>rc-util</code>工具包中的useMergedState hook函数用于状态处理。<br>④ 引入<code>lodash</code>的padStart函数用于字符串处理。<br>⑤ 使用了<code>Select</code>组件和<code>Radio</code>组件内置的Group、Button。</p><h2 id="index入口页">index入口页</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Moment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> momentGenerateConfig <span class="keyword">from</span> <span class="string">&#x27;rc-picker/lib/generate/moment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> generateCalendar, &#123; <span class="title class_">CalendarProps</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./generateCalendar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Calendar</span> = generateCalendar&lt;<span class="title class_">Moment</span>&gt;(momentGenerateConfig);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">CalendarProps</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Calendar</span>;</span><br></pre></td></tr></table></figure><p>入口文件<code>rc-picker</code>组件<code>moment</code>工具函数的<code>generateConfig</code>模块，该模块内部其实就是调用node的<code>moment</code>模块进行一些常规操作的封装，比如：获取/设置当前时间，获取/设置年月日等。调用组件主函数<code>generateCalendar</code>并导出执行结果和Propr类型。</p><h2 id="API参数">API参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">CalendarProps</span>&lt;<span class="title class_">DateType</span>&gt; &#123;</span><br><span class="line">  prefixCls?: string;</span><br><span class="line">  className?: string;</span><br><span class="line">  style?: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">  <span class="comment">/** 国际化配置 */</span></span><br><span class="line">  locale?: <span class="keyword">typeof</span> enUS;</span><br><span class="line">  validRange?: [<span class="title class_">DateType</span>, <span class="title class_">DateType</span>];</span><br><span class="line">  <span class="comment">/** 不可选择的日期，参数为当前 value，注意使用时不要直接修改 */</span></span><br><span class="line">  disabledDate?: <span class="function">(<span class="params">date: DateType</span>) =&gt;</span> boolean;</span><br><span class="line">  <span class="comment">/** 自定义渲染日期单元格，返回内容覆盖单元格 */</span></span><br><span class="line">  dateFullCellRender?: <span class="function">(<span class="params">date: DateType</span>) =&gt;</span> <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="comment">/** 自定义渲染日期单元格，返回内容会被追加到单元格 */</span></span><br><span class="line">  dateCellRender?: <span class="function">(<span class="params">date: DateType</span>) =&gt;</span> <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="comment">/** 自定义渲染月单元格，返回内容覆盖单元格 */</span></span><br><span class="line">  monthFullCellRender?: <span class="function">(<span class="params">date: DateType</span>) =&gt;</span> <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="comment">/** 自定义渲染月单元格，返回内容会被追加到单元格 */</span></span><br><span class="line">  monthCellRender?: <span class="function">(<span class="params">date: DateType</span>) =&gt;</span> <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="comment">/** 自定义头部内容 */</span></span><br><span class="line">  headerRender?: <span class="title class_">HeaderRender</span>&lt;<span class="title class_">DateType</span>&gt;;</span><br><span class="line">  <span class="comment">/** 展示日期 */</span></span><br><span class="line">  value?: <span class="title class_">DateType</span>;</span><br><span class="line">  <span class="comment">/** 默认展示的日期 */</span></span><br><span class="line">  defaultValue?: <span class="title class_">DateType</span>;</span><br><span class="line">  <span class="comment">/** 初始模式 */</span></span><br><span class="line">  mode?: <span class="title class_">CalendarMode</span>;</span><br><span class="line">  <span class="comment">/** 是否全屏显示 */</span></span><br><span class="line">  fullscreen?: boolean;</span><br><span class="line">  <span class="comment">/** 日期变化回调 */</span></span><br><span class="line">  onChange?: <span class="function">(<span class="params">date: DateType</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  <span class="comment">/** 日期面板变化回调 */</span></span><br><span class="line">  onPanelChange?: <span class="function">(<span class="params">date: DateType, mode: CalendarMode</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  <span class="comment">/** 点击选择日期回调 */</span></span><br><span class="line">  onSelect?: <span class="function">(<span class="params">date: DateType</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三个工具函数">三个工具函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isSameYear</span>(<span class="params">date1: DateType, date2: DateType</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> date1 &amp;&amp; date2 &amp;&amp; generateConfig.<span class="title function_">getYear</span>(date1) === generateConfig.<span class="title function_">getYear</span>(date2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isSameMonth</span>(<span class="params">date1: DateType, date2: DateType</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="title function_">isSameYear</span>(date1, date2) &amp;&amp; generateConfig.<span class="title function_">getMonth</span>(date1) === generateConfig.<span class="title function_">getMonth</span>(date2)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isSameDate</span>(<span class="params">date1: DateType, date2: DateType</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="title function_">isSameMonth</span>(date1, date2) &amp;&amp; generateConfig.<span class="title function_">getDate</span>(date1) === generateConfig.<span class="title function_">getDate</span>(date2)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这三个函数用于判断当前选择的时间日期和之前的日期是否是处于同一天/同一月/同一年。</p><h2 id="render函数">render函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">LocaleReceiver</span> <span class="attr">componentName</span>=<span class="string">&quot;Calendar&quot;</span> <span class="attr">defaultLocale</span>=<span class="string">&#123;getDefaultLocale&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;(mergedLocale: any) =&gt; (</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;classNames(</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">calendarPrefixCls</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            [`$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-full</span>`]<span class="attr">:</span> <span class="attr">fullscreen</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            [`$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-mini</span>`]<span class="attr">:</span> !<span class="attr">fullscreen</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            [`$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-rtl</span>`]<span class="attr">:</span> <span class="attr">direction</span> === <span class="string">&#x27;rtl&#x27;</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        )&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;style&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;headerRender ? (</span></span><br><span class="line"><span class="language-xml">          headerRender(&#123;</span></span><br><span class="line"><span class="language-xml">            value: mergedValue,</span></span><br><span class="line"><span class="language-xml">            type: mergedMode,</span></span><br><span class="line"><span class="language-xml">            onChange: onInternalSelect,</span></span><br><span class="line"><span class="language-xml">            onTypeChange: triggerModeChange,</span></span><br><span class="line"><span class="language-xml">          &#125;)</span></span><br><span class="line"><span class="language-xml">        ) : (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">CalendarHeader</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">prefixCls</span>=<span class="string">&#123;calendarPrefixCls&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;mergedValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">generateConfig</span>=<span class="string">&#123;generateConfig&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">mode</span>=<span class="string">&#123;mergedMode&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">fullscreen</span>=<span class="string">&#123;fullscreen&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">locale</span>=<span class="string">&#123;mergedLocale.lang&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">validRange</span>=<span class="string">&#123;validRange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;onInternalSelect&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onModeChange</span>=<span class="string">&#123;triggerModeChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">RCPickerPanel</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;mergedValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">prefixCls</span>=<span class="string">&#123;prefixCls&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">locale</span>=<span class="string">&#123;mergedLocale.lang&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">generateConfig</span>=<span class="string">&#123;generateConfig&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">dateRender</span>=<span class="string">&#123;dateRender&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">monthCellRender</span>=<span class="string">&#123;date</span> =&gt;</span> monthRender(date, mergedLocale.lang)&#125;</span></span><br><span class="line"><span class="language-xml">          onSelect=&#123;onInternalSelect&#125;</span></span><br><span class="line"><span class="language-xml">          mode=&#123;panelMode&#125;</span></span><br><span class="line"><span class="language-xml">          picker=&#123;panelMode as any&#125;</span></span><br><span class="line"><span class="language-xml">          disabledDate=&#123;mergedDisabledDate&#125;</span></span><br><span class="line"><span class="language-xml">          hideHeader</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    )&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">LocaleReceiver</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>① 使用国际化配置组件<code>LocaleReceiver</code>，内部通过组件名componentName获取国际化配置数据，并传参到<code>this.props.children()</code>函数中。<br>② 优先加载用户配置的自定义头部渲染<code>headerRender</code>。<br>③ 若没有配置该项则渲染<code>CalendarHeader</code>组件，然后渲染<code>rc-picker</code>。</p><h2 id="三个State状态">三个State状态</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Current Value</span></span><br><span class="line"><span class="comment">// 引入rc-util中的工具hook函数 状态值处理</span></span><br><span class="line"><span class="keyword">const</span> [mergedValue, setMergedValue] = <span class="title function_">useMergedState</span>(<span class="function">() =&gt;</span> value || generateConfig.<span class="title function_">getNow</span>(), &#123;</span><br><span class="line">  defaultValue,</span><br><span class="line">  value,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mode</span></span><br><span class="line"><span class="keyword">const</span> [mergedMode, setMergedMode] = <span class="title function_">useMergedState</span>(<span class="string">&#x27;month&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: mode,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> panelMode = <span class="title class_">React</span>.<span class="property">useMemo</span>&lt;<span class="string">&#x27;month&#x27;</span> | <span class="string">&#x27;date&#x27;</span>&gt;(</span><br><span class="line">  <span class="function">() =&gt;</span> (mergedMode === <span class="string">&#x27;year&#x27;</span> ? <span class="string">&#x27;month&#x27;</span> : <span class="string">&#x27;date&#x27;</span>),</span><br><span class="line">  [mergedMode],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>三个状态中，mergedValue存储的是日历的当前值，mergedMode储存的是日历头部的模式，panelMode则是日历面板的模式。</p><h2 id="禁用处理">禁用处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Disabled Date</span></span><br><span class="line"><span class="comment">// 判断不可用时间是否在有效时间范围内 在做禁用处理</span></span><br><span class="line"><span class="keyword">const</span> mergedDisabledDate = <span class="title class_">React</span>.<span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">(<span class="params">date: DateType</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> notInRange = validRange</span><br><span class="line">      ? generateConfig.<span class="title function_">isAfter</span>(validRange[<span class="number">0</span>], date) ||</span><br><span class="line">        generateConfig.<span class="title function_">isAfter</span>(date, validRange[<span class="number">1</span>])</span><br><span class="line">      : <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> notInRange || !!disabledDate?.(date);</span><br><span class="line">  &#125;,</span><br><span class="line">  [disabledDate, validRange],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>对于有配置时间显示范围和禁用函数的情况下执行这个函数。</p><h2 id="一些事件处理函数">一些事件处理函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">triggerPanelChange</span> = (<span class="params">date: DateType, newMode: CalendarMode</span>) =&gt; &#123;</span><br><span class="line">  onPanelChange?.(date, newMode);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">triggerChange</span> = (<span class="params">date: DateType</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setMergedValue</span>(date);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isSameDate</span>(date, mergedValue)) &#123;</span><br><span class="line">    <span class="comment">// Trigger when month panel switch month</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      (panelMode === <span class="string">&#x27;date&#x27;</span> &amp;&amp; !<span class="title function_">isSameMonth</span>(date, mergedValue)) ||</span><br><span class="line">      (panelMode === <span class="string">&#x27;month&#x27;</span> &amp;&amp; !<span class="title function_">isSameYear</span>(date, mergedValue))</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="title function_">triggerPanelChange</span>(date, mergedMode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onChange?.(date);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 头部显示模式改变</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">triggerModeChange</span> = (<span class="params">newMode: CalendarMode</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">setMergedMode</span>(newMode);</span><br><span class="line">  <span class="title function_">triggerPanelChange</span>(mergedValue, newMode);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 时间被选择</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onInternalSelect</span> = (<span class="params">date: DateType</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">triggerChange</span>(date);</span><br><span class="line"></span><br><span class="line">  onSelect?.(date);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间处理包括日历头部显示模式改变和日期改变，从而导致组件状态的变更触发组件重新渲染。</p><h2 id="渲染日期-月份">渲染日期/月份</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染日期 渲染月份</span></span><br><span class="line"><span class="keyword">const</span> dateRender = <span class="title class_">React</span>.<span class="title function_">useCallback</span>(</span><br><span class="line">  (<span class="attr">date</span>: <span class="title class_">DateType</span>): <span class="title class_">React</span>.<span class="property">ReactNode</span> =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (dateFullCellRender) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">dateFullCellRender</span>(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;classNames(</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-cell-inner</span>`, `$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-date</span>`, &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          [`$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-date-today</span>`]<span class="attr">:</span> <span class="attr">isSameDate</span>(<span class="attr">today</span>, <span class="attr">date</span>),</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-date-value</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;padStart(String(generateConfig.getDate(date)), 2, &#x27;0&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-date-content</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;dateCellRender &amp;&amp; dateCellRender(date)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  [dateFullCellRender, dateCellRender],</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> monthRender = <span class="title class_">React</span>.<span class="title function_">useCallback</span>(</span><br><span class="line">  (<span class="attr">date</span>: <span class="title class_">DateType</span>, <span class="attr">locale</span>: <span class="title class_">Locale</span>): <span class="title class_">React</span>.<span class="property">ReactNode</span> =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (monthFullCellRender) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">monthFullCellRender</span>(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> months = locale.<span class="property">shortMonths</span> || generateConfig.<span class="property">locale</span>.<span class="property">getShortMonths</span>!(locale.<span class="property">locale</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;classNames(</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-cell-inner</span>`, `$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-date</span>`, &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          [`$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-date-today</span>`]<span class="attr">:</span> <span class="attr">isSameMonth</span>(<span class="attr">today</span>, <span class="attr">date</span>),</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-date-value</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;months[generateConfig.getMonth(date)]&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">calendarPrefixCls</span>&#125;<span class="attr">-date-content</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;monthCellRender &amp;&amp; monthCellRender(date)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  [monthFullCellRender, monthCellRender],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>渲染日历面板的月份或者日期以用户自定义渲染函数优先，否则加载原计划中的布局和样式。</p><h2 id="CalendarHeader组件">CalendarHeader组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">CalendarHeaderProps</span>&lt;<span class="title class_">DateType</span>&gt; &#123;</span><br><span class="line">  <span class="attr">prefixCls</span>: string;</span><br><span class="line">  <span class="attr">value</span>: <span class="title class_">DateType</span>;</span><br><span class="line">  validRange?: [<span class="title class_">DateType</span>, <span class="title class_">DateType</span>];</span><br><span class="line">  <span class="attr">generateConfig</span>: <span class="title class_">GenerateConfig</span>&lt;<span class="title class_">DateType</span>&gt;;</span><br><span class="line">  <span class="attr">locale</span>: <span class="title class_">Locale</span>;</span><br><span class="line">  <span class="attr">mode</span>: <span class="title class_">CalendarMode</span>;</span><br><span class="line">  <span class="attr">fullscreen</span>: boolean;</span><br><span class="line">  <span class="attr">onChange</span>: <span class="function">(<span class="params">date: DateType</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  <span class="attr">onModeChange</span>: <span class="function">(<span class="params">mode: CalendarMode</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title class_">CalendarHeader</span>&lt;<span class="title class_">DateType</span>&gt;(<span class="attr">props</span>: <span class="title class_">CalendarHeaderProps</span>&lt;<span class="title class_">DateType</span>&gt;) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; prefixCls, fullscreen, mode, onChange, onModeChange &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> divRef = <span class="title class_">React</span>.<span class="property">useRef</span>&lt;<span class="title class_">HTMLDivElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sharedProps = &#123;</span><br><span class="line">    ...props,</span><br><span class="line">    onChange,</span><br><span class="line">    fullscreen,</span><br><span class="line">    divRef,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-header</span>`&#125; <span class="attr">ref</span>=<span class="string">&#123;divRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">YearSelect</span> &#123;<span class="attr">...sharedProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;mode === &#x27;month&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">MonthSelect</span> &#123;<span class="attr">...sharedProps</span>&#125; /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ModeSwitch</span> &#123;<span class="attr">...sharedProps</span>&#125; <span class="attr">onModeChange</span>=<span class="string">&#123;onModeChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CalendarHeader</span>;</span><br></pre></td></tr></table></figure><p>日历头部组件，分为三个子组件：年份选择，月份选择和模式转换，涉及到最重要的函数就是<code>onChange</code>和<code>onModeChange</code>函数，作用就是当年份或者月份和显示模式变动之后修改对应的组件状态，从而重新渲染组件。</p><h2 id="渲染头部年份-月份-模式选择">渲染头部年份/月份/模式选择</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染头部 年份选择</span></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">YearSelect</span>&lt;<span class="title class_">DateType</span>&gt;(<span class="attr">props</span>: <span class="title class_">SharedProps</span>&lt;<span class="title class_">DateType</span>&gt;) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    fullscreen,</span><br><span class="line">    validRange,</span><br><span class="line">    generateConfig,</span><br><span class="line">    locale,</span><br><span class="line">    prefixCls,</span><br><span class="line">    value,</span><br><span class="line">    onChange,</span><br><span class="line">    divRef,</span><br><span class="line">  &#125; = props;</span><br><span class="line">  <span class="comment">// 上下十年范围可供选择</span></span><br><span class="line">  <span class="keyword">const</span> year = generateConfig.<span class="title function_">getYear</span>(value || generateConfig.<span class="title function_">getNow</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> start = year - <span class="title class_">YearSelectOffset</span>;</span><br><span class="line">  <span class="keyword">let</span> end = start + <span class="title class_">YearSelectTotal</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (validRange) &#123;</span><br><span class="line">    start = generateConfig.<span class="title function_">getYear</span>(validRange[<span class="number">0</span>]);</span><br><span class="line">    end = generateConfig.<span class="title function_">getYear</span>(validRange[<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> suffix = locale &amp;&amp; locale.<span class="property">year</span> === <span class="string">&#x27;年&#x27;</span> ? <span class="string">&#x27;年&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">options</span>: &#123; <span class="attr">label</span>: string; <span class="attr">value</span>: number &#125;[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = start; index &lt; end; index++) &#123;</span><br><span class="line">    options.<span class="title function_">push</span>(&#123; <span class="attr">label</span>: <span class="string">`<span class="subst">$&#123;index&#125;</span><span class="subst">$&#123;suffix&#125;</span>`</span>, <span class="attr">value</span>: index &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">size</span>=<span class="string">&#123;fullscreen</span> ? <span class="attr">undefined</span> <span class="attr">:</span> &#x27;<span class="attr">small</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">options</span>=<span class="string">&#123;options&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;year&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-year-select</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;numYear</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        let newDate = generateConfig.setYear(value, numYear);</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        if (validRange) &#123;</span></span><br><span class="line"><span class="language-xml">          const [startDate, endDate] = validRange;</span></span><br><span class="line"><span class="language-xml">          const newYear = generateConfig.getYear(newDate);</span></span><br><span class="line"><span class="language-xml">          const newMonth = generateConfig.getMonth(newDate);</span></span><br><span class="line"><span class="language-xml">          if (</span></span><br><span class="line"><span class="language-xml">            newYear === generateConfig.getYear(endDate) &amp;&amp;</span></span><br><span class="line"><span class="language-xml">            newMonth &gt; generateConfig.getMonth(endDate)</span></span><br><span class="line"><span class="language-xml">          ) &#123;</span></span><br><span class="line"><span class="language-xml">            newDate = generateConfig.setMonth(newDate, generateConfig.getMonth(endDate));</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">          if (</span></span><br><span class="line"><span class="language-xml">            newYear === generateConfig.getYear(startDate) &amp;&amp;</span></span><br><span class="line"><span class="language-xml">            newMonth &lt; generateConfig.getMonth(startDate)</span></span><br><span class="line"><span class="language-xml">          ) &#123;</span></span><br><span class="line"><span class="language-xml">            newDate = generateConfig.setMonth(newDate, generateConfig.getMonth(startDate));</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        onChange(newDate);</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      getPopupContainer=&#123;() =&gt; divRef!.current!&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以当前年份为中心，提供上下十个年份供选择，循环生成对应的Option选项，再把Select渲染到<code>CalendarHeader</code>组件的div中。</p><p>同理，月份Select渲染也是类似：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染头部 月份选择</span></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">MonthSelect</span>&lt;<span class="title class_">DateType</span>&gt;(<span class="attr">props</span>: <span class="title class_">SharedProps</span>&lt;<span class="title class_">DateType</span>&gt;) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    prefixCls,</span><br><span class="line">    fullscreen,</span><br><span class="line">    validRange,</span><br><span class="line">    value,</span><br><span class="line">    generateConfig,</span><br><span class="line">    locale,</span><br><span class="line">    onChange,</span><br><span class="line">    divRef,</span><br><span class="line">  &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> month = generateConfig.<span class="title function_">getMonth</span>(value || generateConfig.<span class="title function_">getNow</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> end = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (validRange) &#123;</span><br><span class="line">    <span class="keyword">const</span> [rangeStart, rangeEnd] = validRange;</span><br><span class="line">    <span class="keyword">const</span> currentYear = generateConfig.<span class="title function_">getYear</span>(value);</span><br><span class="line">    <span class="keyword">if</span> (generateConfig.<span class="title function_">getYear</span>(rangeEnd) === currentYear) &#123;</span><br><span class="line">      end = generateConfig.<span class="title function_">getMonth</span>(rangeEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (generateConfig.<span class="title function_">getYear</span>(rangeStart) === currentYear) &#123;</span><br><span class="line">      start = generateConfig.<span class="title function_">getMonth</span>(rangeStart);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> months = locale.<span class="property">shortMonths</span> || generateConfig.<span class="property">locale</span>.<span class="property">getShortMonths</span>!(locale.<span class="property">locale</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">options</span>: &#123; <span class="attr">label</span>: string; <span class="attr">value</span>: number &#125;[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = start; index &lt;= end; index += <span class="number">1</span>) &#123;</span><br><span class="line">    options.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">label</span>: months[index],</span><br><span class="line">      <span class="attr">value</span>: index,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">size</span>=<span class="string">&#123;fullscreen</span> ? <span class="attr">undefined</span> <span class="attr">:</span> &#x27;<span class="attr">small</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-month-select</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;month&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">options</span>=<span class="string">&#123;options&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;newMonth</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        onChange(generateConfig.setMonth(value, newMonth));</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      getPopupContainer=&#123;() =&gt; divRef!.current!&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模式切换采用了按钮组的形式，调用了模式切换函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日历模式切换</span></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">ModeSwitch</span>&lt;<span class="title class_">DateType</span>&gt;(<span class="attr">props</span>: <span class="title class_">ModeSwitchProps</span>&lt;<span class="title class_">DateType</span>&gt;) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; prefixCls, locale, mode, fullscreen, onModeChange &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Group</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onChange</span>=<span class="string">&#123;(&#123;</span> <span class="attr">target:</span> &#123; <span class="attr">value</span> &#125; &#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        onModeChange(value);</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      value=&#123;mode&#125;</span></span><br><span class="line"><span class="language-xml">      size=&#123;fullscreen ? undefined : &#x27;small&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      className=&#123;`$&#123;prefixCls&#125;-mode-switch`&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">value</span>=<span class="string">&quot;month&quot;</span>&gt;</span>&#123;locale.month&#125;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">value</span>=<span class="string">&quot;year&quot;</span>&gt;</span>&#123;locale.year&#125;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Group</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：<br>① 它山之石可以攻玉，要善于利用工具或者已有的组件进行封装，比如文中提到的<code>lodash rc-util rc-picker</code>等。<br>② 导出组件的同时，需要把对应的componentNameProps也导出，便于其它使用者采用这个组件的类型和代码提示。<br>③ <code>_interopRequireDefault</code>是在<code>rc-util/lib/hooks/useMergedState</code>里面看到的，这个方法可以在es6环境下使用common.js的模块，其内部实现也就是给需要引入的cjs模块添加一个<code>default</code>属性，可以支持es6的使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getFixedDate</span>: <span class="keyword">function</span> <span class="title function_">getFixedDate</span>(<span class="params">string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>, _moment.<span class="property">default</span>)(string, <span class="string">&#x27;YYYY-MM-DD&#x27;</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>④ 这种写法是在<code>rc-picker/lib/generate/moment</code>函数中看到，<code>_moment.default</code>是一个函数，前面执行逗号表达式返回这个函数，后面再传参调用此函数。</p>]]></content>
    
    <summary type="html">
    
      antdesign源码解析之日历Calendar
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/react/"/>
    
    
  </entry>
  
  <entry>
    <title>antd源码解析之Anchor</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/06/19/antd_anchor/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/06/19/antd_anchor/</id>
    <published>2021-06-19T15:12:00.000Z</published>
    <updated>2025-03-26T03:21:50.679Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Anchor锚点定位跳转，早期前端刀耕火种时代使用的是<code>&lt;a&gt;</code>标签的href属性做锚点跳转，固定模式下有点类似于固钉Affix，事实也确实如此。</p><h2 id="API参数">API参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">AnchorProps</span> &#123;</span><br><span class="line">  prefixCls?: string;</span><br><span class="line">  className?: string;</span><br><span class="line">  style?: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">  children?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="comment">/** 距离窗口顶部达到指定偏移量后触发 */</span></span><br><span class="line">  offsetTop?: number;</span><br><span class="line">  <span class="comment">/** 锚点区域边界 */</span></span><br><span class="line">  bounds?: number;</span><br><span class="line">  <span class="comment">/** 固定模式 */</span></span><br><span class="line">  affix?: boolean;</span><br><span class="line">  <span class="comment">/** affix=&#123;false&#125; 时是否显示小圆点 */</span></span><br><span class="line">  showInkInFixed?: boolean;</span><br><span class="line">  <span class="comment">/** 指定滚动的容器 */</span></span><br><span class="line">  getContainer?: <span class="function">() =&gt;</span> <span class="title class_">AnchorContainer</span>;</span><br><span class="line">  <span class="comment">/** 自定义高亮锚点 */</span></span><br><span class="line">  getCurrentAnchor?: <span class="function">() =&gt;</span> string;</span><br><span class="line">  onClick?: <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    e: React.MouseEvent&lt;HTMLElement&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    link: &#123; title: React.ReactNode; href: string &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  <span class="comment">/** 锚点滚动偏移量，默认与 offsetTop 相同 */</span></span><br><span class="line">  targetOffset?: number;</span><br><span class="line">  <span class="comment">/** 监听锚点链接改变 */</span></span><br><span class="line">  onChange?: <span class="function">(<span class="params">currentActiveLink: string</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="render函数以及对应的Element">render函数以及对应的Element</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">render = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getPrefixCls, direction &#125; = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">prefixCls</span>: customizePrefixCls,</span><br><span class="line">    className = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    style,</span><br><span class="line">    offsetTop,</span><br><span class="line">    affix,</span><br><span class="line">    showInkInFixed,</span><br><span class="line">    children,</span><br><span class="line">  &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; activeLink &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">  <span class="keyword">const</span> prefixCls = <span class="title function_">getPrefixCls</span>(<span class="string">&#x27;anchor&#x27;</span>, customizePrefixCls);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">prefixCls</span> = prefixCls;</span><br><span class="line">  <span class="keyword">const</span> inkClass = <span class="title function_">classNames</span>(<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-ink-ball`</span>, &#123;</span><br><span class="line">    <span class="attr">visible</span>: activeLink,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> wrapperClass = <span class="title function_">classNames</span>(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-wrapper`</span>,</span><br><span class="line">    &#123; [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-rtl`</span>]: direction === <span class="string">&#x27;rtl&#x27;</span> &#125;,</span><br><span class="line">    className,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> anchorClass = <span class="title function_">classNames</span>(prefixCls, &#123;</span><br><span class="line">    <span class="attr">fixed</span>: !affix &amp;&amp; !showInkInFixed,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> wrapperStyle = &#123;</span><br><span class="line">    <span class="attr">maxHeight</span>: offsetTop ? <span class="string">`calc(100vh - <span class="subst">$&#123;offsetTop&#125;</span>px)`</span> : <span class="string">&#x27;100vh&#x27;</span>,</span><br><span class="line">    ...style,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> anchorContent = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.wrapperRef&#125;</span> <span class="attr">className</span>=<span class="string">&#123;wrapperClass&#125;</span> <span class="attr">style</span>=<span class="string">&#123;wrapperStyle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;anchorClass&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-ink</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;inkClass&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInkNode&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">AnchorContext.Provider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">value</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">registerLink:</span> <span class="attr">this.registerLink</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">unregisterLink:</span> <span class="attr">this.unregisterLink</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">activeLink:</span> <span class="attr">this.state.activeLink</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">scrollTo:</span> <span class="attr">this.handleScrollTo</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick:</span> <span class="attr">this.props.onClick</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;!affix ? (</span></span><br><span class="line"><span class="language-xml">        anchorContent</span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Affix</span> <span class="attr">offsetTop</span>=<span class="string">&#123;offsetTop&#125;</span> <span class="attr">target</span>=<span class="string">&#123;this.getContainer&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;anchorContent&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Affix</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">AnchorContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里载入了一些antd专有的样式和用户自定义的样式，固定模式下引用了Affix组件包装，多组件之间使用Context进行通信，共享了一些状态和函数。</p><h2 id="生命周期函数">生命周期函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">scrollContainer</span> = <span class="variable language_">this</span>.<span class="title function_">getContainer</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">scrollEvent</span> = <span class="title function_">addEventListener</span>(<span class="variable language_">this</span>.<span class="property">scrollContainer</span>, <span class="string">&#x27;scroll&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleScroll</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">handleScroll</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">scrollEvent</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentContainer = <span class="variable language_">this</span>.<span class="title function_">getContainer</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">scrollContainer</span> !== currentContainer) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scrollContainer</span> = currentContainer;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scrollEvent</span>.<span class="title function_">remove</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">scrollEvent</span> = <span class="title function_">addEventListener</span>(<span class="variable language_">this</span>.<span class="property">scrollContainer</span>, <span class="string">&#x27;scroll&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleScroll</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">handleScroll</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">updateInk</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">scrollEvent</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scrollEvent</span>.<span class="title function_">remove</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①组件初始化对指定容器元素（默认为window）添加滚动事件监听，并执行<code>handleScroll</code>（默认也会执行一次）。②当调用setState状态更新也就是当前链接activeLink发生变动触发<code>componentDidUpdate</code>函数，函数中判断滚动的容器是否发生变动，做相应的处理后调用<code>handleScroll</code>和<code>updateInk</code>函数。</p><h2 id="Context中的函数">Context中的函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Context</span></span><br><span class="line">registerLink = <span class="function">(<span class="params">link: string</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">links</span>.<span class="title function_">includes</span>(link)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">links</span>.<span class="title function_">push</span>(link);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">unregisterLink = <span class="function">(<span class="params">link: string</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="property">links</span>.<span class="title function_">indexOf</span>(link);</span><br><span class="line">  <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">links</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">handleScrollTo = <span class="function">(<span class="params">link: string</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; offsetTop, targetOffset &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setCurrentActiveLink</span>(link);</span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">this</span>.<span class="title function_">getContainer</span>();</span><br><span class="line">  <span class="keyword">const</span> scrollTop = <span class="title function_">getScroll</span>(container, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> sharpLinkMatch = sharpMatcherRegx.<span class="title function_">exec</span>(link);</span><br><span class="line">  <span class="keyword">if</span> (!sharpLinkMatch) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> targetElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(sharpLinkMatch[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">if</span> (!targetElement) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> eleOffsetTop = <span class="title function_">getOffsetTop</span>(targetElement, container);</span><br><span class="line">  <span class="keyword">let</span> y = scrollTop + eleOffsetTop;</span><br><span class="line">  y -= targetOffset !== <span class="literal">undefined</span> ? targetOffset : offsetTop || <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">animating</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">scrollTo</span>(y, &#123;</span><br><span class="line">    <span class="attr">callback</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">animating</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getContainer</span>: <span class="variable language_">this</span>.<span class="property">getContainer</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>registerLink</code>和<code>unregisterLink</code>函数主要作用是添加和移除锚点项队列links，<code>handleScrollTo</code>函数作用是对Link传过来的href属性找到需要滚动的元素，计算滚动的top值调用<code>scrollTo</code>滚动到对应的位置，这一小段应该配合子元素的解析食用效果更佳。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getOffsetTop</span>(<span class="params">element: HTMLElement, container: AnchorContainer</span>): number &#123;</span><br><span class="line">  <span class="keyword">if</span> (!element.<span class="title function_">getClientRects</span>().<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> rect = element.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (rect.<span class="property">width</span> || rect.<span class="property">height</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (container === <span class="variable language_">window</span>) &#123;</span><br><span class="line">      container = element.<span class="property">ownerDocument</span>!.<span class="property">documentElement</span>!;</span><br><span class="line">      <span class="keyword">return</span> rect.<span class="property">top</span> - container.<span class="property">clientTop</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rect.<span class="property">top</span> - (container <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> rect.<span class="property">top</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数用于获取点击锚点后关联元素距离容器元素的top值，<code>getBoundingClientRect()</code>方法返回元素的大小及其相对于视口的位置（bottom、height、left、right、top、width、x、y），所以<code>rect.top - container.clientTop</code>就是锚点关联元素相对于容器元素的top值，接下来看子组件AnchorLink。</p><h2 id="子组件AnchorLink">子组件AnchorLink</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">registerLink</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">href</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params">&#123; href: prevHref &#125;: AnchorLinkProps</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; href &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="keyword">if</span> (prevHref !== href) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">unregisterLink</span>(prevHref);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">registerLink</span>(href);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">unregisterLink</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">href</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleClick = <span class="function">(<span class="params">e: React.MouseEvent&lt;HTMLElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; scrollTo, onClick &#125; = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; href, title &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  onClick?.(e, &#123; title, href &#125;);</span><br><span class="line">  <span class="title function_">scrollTo</span>(href);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderAnchorLink = <span class="function">(<span class="params">&#123; getPrefixCls &#125;: ConfigConsumerProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">prefixCls</span>: customizePrefixCls, href, title, children, className, target &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="keyword">const</span> prefixCls = <span class="title function_">getPrefixCls</span>(<span class="string">&#x27;anchor&#x27;</span>, customizePrefixCls);</span><br><span class="line">  <span class="keyword">const</span> active = <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">activeLink</span> === href;</span><br><span class="line">  <span class="keyword">const</span> wrapperClassName = <span class="title function_">classNames</span>(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-link`</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-link-active`</span>]: active,</span><br><span class="line">    &#125;,</span><br><span class="line">    className,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> titleClassName = <span class="title function_">classNames</span>(<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-link-title`</span>, &#123;</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-link-title-active`</span>]: active,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;wrapperClassName&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;titleClassName&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">href</span>=<span class="string">&#123;href&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&#123;typeof</span> <span class="attr">title</span> === <span class="string">&#x27;string&#x27;</span> ? <span class="attr">title</span> <span class="attr">:</span> &#x27;&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">target</span>=<span class="string">&#123;target&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;title&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ConfigConsumer</span>&gt;</span>&#123;this.renderAnchorLink&#125;<span class="tag">&lt;/<span class="name">ConfigConsumer</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件作为Context的消费者，初始化的时候调用<code>this.context.registerLink</code>把传入props的href属性添加到锚点队列中，组件状态更新对比前后两个href差异并做添加移除操作，点击锚点元素后出触发<code>handleClick</code>并在内调用<code>onClick</code>回调和父级的<code>handleScrollTo</code>函数，做对应的滚动处理。</p><p><strong>总结</strong>：当共享的属性和方法较多的情况下，可使用Context进行父子组件间的通信；<code>element.getBoundingClientRect()</code>方法可以获取元素相对于视口的位置信息。</p>]]></content>
    
    <summary type="html">
    
      antdesign源码解析之锚点跳转Anchor
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/react/"/>
    
    
  </entry>
  
  <entry>
    <title>antd源码解析之Affix</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/06/14/antd_affix/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/06/14/antd_affix/</id>
    <published>2021-06-14T08:30:00.000Z</published>
    <updated>2025-03-26T03:21:50.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Affix 固钉，就是固定在页面的某个地方，类似于样式中的固定布局。</p><h2 id="API参数">API参数</h2><p>先看组件可以传入什么参数使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface <span class="title class_">AffixProps</span> &#123;</span><br><span class="line">  <span class="comment">/** 距离窗口顶部达到指定偏移量后触发 */</span></span><br><span class="line">  offsetTop?: number;</span><br><span class="line">  <span class="comment">/** 距离窗口底部达到指定偏移量后触发 */</span></span><br><span class="line">  offsetBottom?: number;</span><br><span class="line">  style?: <span class="title class_">React</span>.<span class="property">CSSProperties</span>;</span><br><span class="line">  <span class="comment">/** 固定状态改变时触发的回调函数 */</span></span><br><span class="line">  onChange?: <span class="function">(<span class="params">affixed?: boolean</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  <span class="comment">/** 设置 Affix 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 */</span></span><br><span class="line">  target?: <span class="function">() =&gt;</span> <span class="title class_">Window</span> | <span class="title class_">HTMLElement</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">/** 样式命名空间，传入可覆盖antd命名空间&#x27;ant-|ant&#x27; */</span></span><br><span class="line">  prefixCls?: string;</span><br><span class="line">  <span class="comment">/** 覆写class类名 */</span></span><br><span class="line">  className?: string;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="render函数">render函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">render = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getPrefixCls &#125; = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; affixStyle, placeholderStyle &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; prefixCls, children &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="keyword">const</span> className = <span class="title function_">classNames</span>(&#123;</span><br><span class="line">    [<span class="title function_">getPrefixCls</span>(<span class="string">&#x27;affix&#x27;</span>, prefixCls)]: !!affixStyle,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> props = <span class="title function_">omit</span>(<span class="variable language_">this</span>.<span class="property">props</span>, [<span class="string">&#x27;prefixCls&#x27;</span>, <span class="string">&#x27;offsetTop&#x27;</span>, <span class="string">&#x27;offsetBottom&#x27;</span>, <span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;onChange&#x27;</span>]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ResizeObserver</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onResize</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        this.updatePosition();</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;this.savePlaceholderNode&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;affixStyle &amp;&amp; <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;placeholderStyle&#125;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveFixedNode&#125;</span> <span class="attr">style</span>=<span class="string">&#123;affixStyle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ResizeObserver</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onResize</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              this.updatePosition();</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">            &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ResizeObserver</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ResizeObserver</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里做了一些默认样式的加载，固定初始位置等，利用ResizeObserver组件来监听元素位置、大小的变化。</p><h2 id="组件生命周期函数执行">组件生命周期函数执行</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> targetFunc = <span class="variable language_">this</span>.<span class="title function_">getTargetFunc</span>();</span><br><span class="line">  <span class="keyword">if</span> (targetFunc) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timeout</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">addObserveTarget</span>(<span class="title function_">targetFunc</span>(), <span class="variable language_">this</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">updatePosition</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params">prevProps: AffixProps</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; prevTarget &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">  <span class="keyword">const</span> targetFunc = <span class="variable language_">this</span>.<span class="title function_">getTargetFunc</span>();</span><br><span class="line">  <span class="keyword">let</span> newTarget = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (targetFunc) &#123;</span><br><span class="line">    newTarget = <span class="title function_">targetFunc</span>() || <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prevTarget !== newTarget) &#123;</span><br><span class="line">    <span class="title function_">removeObserveTarget</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (newTarget) &#123;</span><br><span class="line">      <span class="title function_">addObserveTarget</span>(newTarget, <span class="variable language_">this</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">updatePosition</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">prevTarget</span>: newTarget &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    prevProps.<span class="property">offsetTop</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">offsetTop</span> ||</span><br><span class="line">    prevProps.<span class="property">offsetBottom</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">offsetBottom</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">updatePosition</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">measure</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeout</span>);</span><br><span class="line">  <span class="title function_">removeObserveTarget</span>(<span class="variable language_">this</span>);</span><br><span class="line">  (<span class="variable language_">this</span>.<span class="property">updatePosition</span> <span class="keyword">as</span> any).<span class="title function_">cancel</span>();</span><br><span class="line">  (<span class="variable language_">this</span>.<span class="property">lazyUpdatePosition</span> <span class="keyword">as</span> any).<span class="title function_">cancel</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① 组件初始化时<code>addObserveTarget</code>函数给<code>target</code>元素添加了滚动事件监听（不传入target参数相当于给window添加滚动监听），该函数内部调用<code>lazyUpdatePosition</code>函数用于判断事件触发后组件的top、bottom值是否变化，使用装饰器语法在位置更新的函数上做了节流处理，并调用<code>updatePosition</code>函数初始化一些组件状态AffixStyle与placeholderStyle等。<br>② 状态更新触发<code>componentDidUpdate</code>函数，对比前后的target元素，如果发生变动则移除之前的监听并添加新的监听然后更新位置，否则直接更新位置，然后调用<code>measure</code>函数。<br>③ 触发组件卸载函数，清空定时器，移除一些副作用的操作。</p><h2 id="measure函数">measure函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">measure = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; status, lastAffix &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; onChange &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="keyword">const</span> targetFunc = <span class="variable language_">this</span>.<span class="title function_">getTargetFunc</span>();</span><br><span class="line">  <span class="keyword">if</span> (status !== <span class="title class_">AffixStatus</span>.<span class="property">Prepare</span> || !<span class="variable language_">this</span>.<span class="property">fixedNode</span> || !<span class="variable language_">this</span>.<span class="property">placeholderNode</span> || !targetFunc) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> offsetTop = <span class="variable language_">this</span>.<span class="title function_">getOffsetTop</span>();</span><br><span class="line">  <span class="keyword">const</span> offsetBottom = <span class="variable language_">this</span>.<span class="title function_">getOffsetBottom</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> targetNode = <span class="title function_">targetFunc</span>();</span><br><span class="line">  <span class="keyword">if</span> (!targetNode) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">newState</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">AffixState</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="title class_">AffixStatus</span>.<span class="property">None</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> targetRect = <span class="title function_">getTargetRect</span>(targetNode);</span><br><span class="line">  <span class="keyword">const</span> placeholderReact = <span class="title function_">getTargetRect</span>(<span class="variable language_">this</span>.<span class="property">placeholderNode</span>);</span><br><span class="line">  <span class="keyword">const</span> fixedTop = <span class="title function_">getFixedTop</span>(placeholderReact, targetRect, offsetTop);</span><br><span class="line">  <span class="keyword">const</span> fixedBottom = <span class="title function_">getFixedBottom</span>(placeholderReact, targetRect, offsetBottom);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(targetRect, placeholderReact, fixedTop, fixedBottom, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fixedTop !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    newState.<span class="property">affixStyle</span> = &#123;</span><br><span class="line">      <span class="attr">position</span>: <span class="string">&#x27;fixed&#x27;</span>,</span><br><span class="line">      <span class="attr">top</span>: fixedTop,</span><br><span class="line">      <span class="attr">width</span>: placeholderReact.<span class="property">width</span>,</span><br><span class="line">      <span class="attr">height</span>: placeholderReact.<span class="property">height</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    newState.<span class="property">placeholderStyle</span> = &#123;</span><br><span class="line">      <span class="attr">width</span>: placeholderReact.<span class="property">width</span>,</span><br><span class="line">      <span class="attr">height</span>: placeholderReact.<span class="property">height</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fixedBottom !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    newState.<span class="property">affixStyle</span> = &#123;</span><br><span class="line">      <span class="attr">position</span>: <span class="string">&#x27;fixed&#x27;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: fixedBottom,</span><br><span class="line">      <span class="attr">width</span>: placeholderReact.<span class="property">width</span>,</span><br><span class="line">      <span class="attr">height</span>: placeholderReact.<span class="property">height</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    newState.<span class="property">placeholderStyle</span> = &#123;</span><br><span class="line">      <span class="attr">width</span>: placeholderReact.<span class="property">width</span>,</span><br><span class="line">      <span class="attr">height</span>: placeholderReact.<span class="property">height</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newState.<span class="property">lastAffix</span> = !!newState.<span class="property">affixStyle</span>;</span><br><span class="line">  <span class="keyword">if</span> (onChange &amp;&amp; lastAffix !== newState.<span class="property">lastAffix</span>) &#123;</span><br><span class="line">    <span class="title function_">onChange</span>(newState.<span class="property">lastAffix</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(newState <span class="keyword">as</span> <span class="title class_">AffixState</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数中主要计算对应的top和bottom值，保存到状态affixStyle中用于组件渲染，通过lastAffix来判断是否调用回调函数<code>onChange</code></p><p><strong>总结</strong>：组件设计中，可以利用数组队列维护一个事件池，如源码中的<code>addObserveTarget</code>函数；采用装饰器语法对某些频繁触发的函数进行节流操作，从而达到组件优化的作用。</p>]]></content>
    
    <summary type="html">
    
      antdesign源码解析之固钉affix
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/react/"/>
    
    
  </entry>
  
  <entry>
    <title>前端自动化部署方案一</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/06/02/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%B8%80/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/06/02/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%B8%80/</id>
    <published>2021-06-02T14:30:00.000Z</published>
    <updated>2025-03-26T03:21:52.142Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在印象中，使用window server服务器的工作模式都是，本地项目打包，然后远程window服务器，手动复制生成环境下的项目文件到对应的服务器文件夹下，然后，在飞速发展的今天，自动化操作已经成为日常工作中的主流，这里给还在用window serverd的伙伴提供一种自动化解决方案，该方案本站点也正在使用。</p><p>window当然不像Linux那样，可以直接通过ssh传输，可以直接远程操作服务器执行shell命令来操作服务器，由于大部分旧版本的window server系统没有内置SSH服务，所以需要借助这个工具包<a href="https://github.com/PowerShell/Win32-OpenSSH/releases">Win32-OpenSSH</a>，下载解压并进入到<code>C:\Program Files\OpenSSH-Win64</code>，在当前目录执行命令<code>powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1</code>安装SSH服务。</p><h2 id="服务端">服务端</h2><p>设置服务自动启动并启动服务：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc config sshd <span class="built_in">start</span>= auto</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> sshd</span><br></pre></td></tr></table></figure><p>会生成目录和配置文件：<code>C:\ProgramData\ssh C:\Users\账户名\.ssh</code>（这两个是隐藏文件）<br>这里SSH服务的用户是基于window的系统用户。</p><h2 id="客户端">客户端</h2><p>win10系统是自带SSH服务的，可以在应用和功能的可选功能中添加OpenSSH服务。</p><p>登录SSH服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh administrator@your_server_ip</span><br></pre></td></tr></table></figure><p>报错：WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!<br>这里<code>C:\Users\Administrator\.ssh</code>去除当前登录IP的记录。</p><p>退出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit/logout/关掉</span><br></pre></td></tr></table></figure><p>Node项目部署：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">NodeSSH</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;node-ssh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ssh = <span class="keyword">new</span> <span class="title class_">NodeSSH</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;xxx.xxx.xxx.xxx&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;administrator&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  <span class="comment">/** 本地目录 */</span></span><br><span class="line">  <span class="attr">localDir</span>: <span class="string">&#x27;./build&#x27;</span>,</span><br><span class="line">  <span class="comment">/** 远程目录 */</span></span><br><span class="line">  <span class="attr">remoteDir</span>: <span class="string">&#x27;/Project/testPro/mockProject&#x27;</span>,</span><br><span class="line">  <span class="comment">/** 终端命令 */</span></span><br><span class="line">  <span class="attr">command</span>: <span class="string">&#x27;cd C:/Project/testPro &amp;&amp; rmdir mockProject /s/q &amp;&amp; mkdir mockProject&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除服务器缓存</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clearCache</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    ssh.<span class="title function_">execCommand</span>(config.<span class="property">command</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(result.<span class="property">stderr</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(result.<span class="property">stderr</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123;<span class="attr">code</span>: <span class="number">1</span>&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uploadDir</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    ssh.<span class="title function_">putDirectory</span>(config.<span class="property">localDir</span>, config.<span class="property">remoteDir</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">resolve</span>(&#123;<span class="attr">code</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    &#125;, <span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">      <span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//connect sftp</span></span><br><span class="line">ssh.<span class="title function_">connect</span>(&#123;</span><br><span class="line">  ...config,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">tryKeyboard</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">onKeyboardInteractive</span>: <span class="function">(<span class="params">name, instructions, instructionsLang, prompts, finish</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (prompts.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; prompts[<span class="number">0</span>].<span class="property">prompt</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(<span class="string">&#x27;password&#x27;</span>)) &#123;</span><br><span class="line">        <span class="title function_">finish</span>([config.<span class="property">password</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connect success!&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cache clearing...&#x27;</span>)</span><br><span class="line">  <span class="comment">//...清除服务器的旧文件数据</span></span><br><span class="line">  <span class="keyword">const</span> clearRes = <span class="keyword">await</span> <span class="title function_">clearCache</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...上传文件</span></span><br><span class="line">  <span class="keyword">if</span>(clearRes[<span class="string">&#x27;code&#x27;</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clear success!&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;uploading...&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> uploadRes = <span class="keyword">await</span> <span class="title function_">uploadDir</span>()</span><br><span class="line">    <span class="keyword">if</span>(uploadRes[<span class="string">&#x27;code&#x27;</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;upload success!&#x27;</span>)</span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error:&#x27;</span>, uploadRes)</span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error:&#x27;</span>, clearRes)</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当然，这里也可以按照Linux系统一样上传压缩文件解压处理，不过得借助<a href="http://gnuwin32.sourceforge.net/packages/unzip.htm">unzip工具包</a>， 安装后将bin目录下的unzip.exe文件放在C:\Windows目录下，就可以执行unzip命令了。</p>]]></content>
    
    <summary type="html">
    
      前端自动化部署方案一之window server服务器
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/react/"/>
    
    
  </entry>
  
  <entry>
    <title>作业调度和缺页中断</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/05/05/%E4%B8%AD%E6%96%AD%E5%92%8C%E4%BD%9C%E4%B8%9A/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/05/05/%E4%B8%AD%E6%96%AD%E5%92%8C%E4%BD%9C%E4%B8%9A/</id>
    <published>2021-05-05T03:24:00.000Z</published>
    <updated>2025-03-26T03:21:51.281Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>作业调度和缺页中断是操作系统课程中两个重点的考查内容，今天看到看到几道操作系统的题目，在这里回顾和复习一下对应的一些知识。</p><p>首先，简单理解一些课程中的专业词汇：</p><p><strong>缺页中断</strong>：缺页中断就是要访问的页不在主存，需要操作系统将其调入主存后再进行访问。在这个时候，被内存映射的文件实际上成了一个分页交换文件。</p><p>肯定有些吃瓜同学会问，页是个什么东西？为了方便理解，你可以把它看成是书本的页，本书可以看做是物理存储器，而书中所有的文字可以看做的存储的单元块，页就是方便管理这些单元块的。</p><p>对存储器进行分页管理，可以更好的利用磁盘中的碎片，提高磁盘的利用率，因为分页的地址在逻辑上是连续的，而在物理上是非连续的。</p><p><strong>作业调度</strong>：作业是计算机用户交给操作系统的执行单位，作业调度是操作系统对计算机资源的合理分配方式，常见的有五种调度方式：</p><p>(1) FCFS：先到先服务，即按照到达顺序先来先服务的方法，此方法是非抢占式的。</p><p>(2) SJF：短作业优先调度，即按照执行时间短的优先，当到达时间不同时，将新来的执行时间和之前的剩余时间对比，短的优先（就可能存在抢占了）。</p><p>(3) 非抢占优先级：突出优先级，优先级大的优先，执行时间少的优先。</p><p>(4) RR：固定时间片，非抢占轮转调度，固定一个程序一次只能运行一个时间片，再按到达时间，先来先执行。</p><p>(5) 抢占轮转调度：同时考虑优先级、时间片、到达先后。</p><p>另外还有两个需要了解的概念：</p><p>(1) 周转时间：从任务到达时间到任务执行完毕所用的时间。</p><p>(2) 等待时间：任务到达后等待的所有时间相加。</p><p>(3) 带权周转时间：周转时间与运行时间的比值，即单位运行时间下的周转时间值。</p><h4 id="下面是举栗子时间">下面是举栗子时间</h4><h5 id="例一">例一</h5><p><img src="http://zhongweipeng.cn/adjust_e1.png" alt="例一作业调度"></p><p>按照题目的问答我们纵向来解答，即按照不同的周转算法来回答不同的问题：</p><p>(1) 按照上面先来先服务的概念，执行顺序是: 1(0-10), 2(10-11), 3(11-13), 4(13-14)</p><p><img src="http://zhongweipeng.cn/e1_answer_1.png" alt="先来先服务"></p><p>(2) 按照上面RR固定时间片的概念，执行顺序是: 1(0-1), 2(1-2), 3(2-3), 4(3-4), 1(4-5), 3(5-6), 1(6-14)</p><p><img src="http://zhongweipeng.cn/e1_answer_2.png" alt="RR固定时间片"></p><p>(3) 按照上面非抢占式优先级算法的概念，执行顺序是: 1(0-10), 4(10-11), 3(11-13), 2(13-14)</p><p><img src="http://zhongweipeng.cn/e1_answer_3.png" alt="非抢占式优先级"></p><h5 id="例二">例二</h5><p><img src="http://zhongweipeng.cn/adjust_e2.png" alt="例二作业调度"></p><p>(1) 按照上面先来先服务的概念，执行顺序和周转时间如下图</p><p><img src="http://zhongweipeng.cn/e2_answer_1.png" alt="先来先服务"></p><p>(2) 按照上面短作业优先作业的概念，执行顺序和周转时间如下图</p><p><img src="http://zhongweipeng.cn/e2_answer_2.png" alt="短作业优先作业"></p><h5 id="例三">例三</h5><p>对于如下的页面访问序列：1，2，3，4，1，2，5，1，2，3，4，5；当内存块数为3时，试问：使用FIFO、LRU置换算法产生的缺页中断是多少？（所有内存开始时都是空的，凡是第一次用到的页面都产生一次缺页中断）</p><p>(1) FIFO先进先出</p><p><img src="http://zhongweipeng.cn/e3_answer_1.png" alt="FIFO先进先出淘汰页"></p><p>(2) LRU最近最久未使用</p><p><img src="http://zhongweipeng.cn/e3_answer_2.png" alt="LRU最近最久未使用淘汰页"></p>]]></content>
    
    <summary type="html">
    
      作业调度和缺页中断
    
    </summary>
    
    
      <category term="CS专业基础" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/CS%E4%B8%93%E4%B8%9A%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是哈夫曼树</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/05/01/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/05/01/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</id>
    <published>2021-05-01T08:45:00.000Z</published>
    <updated>2025-03-26T03:21:51.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天看到一道题，是这样描述的：</p><p>设给定一个权值集合W=(3，5，7，9，11)，要求根据给定的权值集合构造一棵哈夫曼树并计算哈夫曼树的带权路径长度WPL？</p><p>就以这道题为基准，让我们来看看哈夫曼树是怎么一回事。</p><p>首先，哈夫曼树是一个叫做哈夫曼博士发明的，可以利用结点权重和路径长度，通过树的带权路径长度(WPL)，来求出最优二叉树。</p><h4 id="1-树的路径">1. 树的路径</h4><p><img src="http://zhongweipeng.cn/node_tree.png" alt="树"></p><p>如上图中的树所示，结点A到结点E的路径为A, B, E。</p><h4 id="2-路径长度">2. 路径长度</h4><p><img src="http://zhongweipeng.cn/node_dege.png" alt="树"></p><p>如上图中的树所示，结点A到结点D之间有两条边，所以AD的路径长度为2。</p><h4 id="3-结点的带权路径长度">3. 结点的带权路径长度</h4><p><img src="http://zhongweipeng.cn/node_weight.png" alt="树"></p><p>如上图中的树所示，假设结点D的权重是3，从根结点到D的路径长度是2，所以结点D的带权路径长度3*2=6。</p><h4 id="4-树的带权路径长度WPL">4. 树的带权路径长度WPL</h4><p><img src="http://zhongweipeng.cn/node_weight.png" alt="树"></p><p>如上图中的树所示，假设结点C的权重是2，结点D的权重是3，结点E的权重是5；我们再看路径长度，结点C的路径长度为1，结点D和结点D的路径长度都为2，所以树的带权路径长度WPL = 1*2 + 2*3 + 2*5 = 18。</p><h4 id="5-构建哈夫曼树（最优二叉树）">5. 构建哈夫曼树（最优二叉树）</h4><p>所谓最优二叉树就是带权路径长度最小的树，所以不是随便构建一棵树都是哈夫曼树，根据上面的WPL求值方法，我们可以推断：在构建二叉树的时候，只需要把结点权重小的往根结点上靠，这样的树计算出来的WPL往往是最小的，这棵树也就是哈夫曼树。</p><h5 id="5-1-借助队列，构建深林">5.1 借助队列，构建深林</h5><p>接下来回到上面的题目来，题目给出了对应的权值集合(3, 5, 7, 9, 11)，我们先构建深林（把每一个结点当做一颗独立的树），借助队列来构建对应的树</p><p><img src="http://zhongweipeng.cn/hahuman01.png" alt="深林"></p><h5 id="5-2-取两个结点，生成子树">5.2 取两个结点，生成子树</h5><p>左侧借助队列的形式从小到大存储对应权重的结点，按权重由小到大的顺序排列，取权重最小的结点2, 3，以权重的和5为父结点生成一棵树。</p><p><img src="http://zhongweipeng.cn/hahuman02.png" alt="构建树"></p><h5 id="5-3-从队列中删除选中的结点，插入新的结点">5.3 从队列中删除选中的结点，插入新的结点</h5><p>把上一步中选中的两个结点从队列中删除，并插入上面新生成的父结点，新的队列按从小到大排序，然后重5.2的操作。</p><p><img src="http://zhongweipeng.cn/hahuman03.png" alt="构建树"></p><h5 id="5-4-当新插入的结点不在队列第一个元素的下面，应生成一个新的子树">5.4 当新插入的结点不在队列第一个元素的下面，应生成一个新的子树</h5><p>接下来挑选7, 8，生成新的父结点15，放入队列中排序后处于最下面的位置，而此时选择两个结点并没有选中新生成的结点15，而是选中9和11，遇到这种情况时，我们应该考虑在原有树的外部，重新生成一颗新的子树，然后重复5.2的步骤，再把两颗子树通过生成父结点，然后可以根据树的带权路径长度算法算出WPL的值（WPL=78）</p><p><img src="http://zhongweipeng.cn/hahuman04.png" alt="哈夫曼树"></p><p>其实哈夫曼树在生活中有广泛的应用，比如通信领域的哈夫曼编码，计算机程序中的哈夫曼编码等等。</p>]]></content>
    
    <summary type="html">
    
      什么是哈夫曼树？如何构建哈夫曼树？
    
    </summary>
    
    
      <category term="CS专业基础" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/CS%E4%B8%93%E4%B8%9A%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="哈夫曼树" scheme="https://github.com/joydezhong/joydezhong.github.io.git/tags/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>与时间对话，2021节点</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/02/25/%E4%B8%8E%E6%97%B6%E9%97%B4%E5%AF%B9%E8%AF%9D/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/02/25/%E4%B8%8E%E6%97%B6%E9%97%B4%E5%AF%B9%E8%AF%9D/</id>
    <published>2021-02-25T13:20:01.000Z</published>
    <updated>2025-03-26T03:21:51.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>前言：凡过往，皆序章；凡当下，皆美好；凡未来，皆可期。</em></p><p>本来这篇文章原计划于春节假期在家完成，但种种的种种…就不赘述，前言即大纲，开始行文。</p><p>记得上一次写总结是在一八年的时候，也是在这里，与自己对话，与过去对话，也与未来对话，所以今天的标题就是：与时间对话。在二零二一这个节点上，也算是工作了四年了吧。回望过去，一六年底，剑未佩妥的来到广州，先后经历了良星、英虎、摘星者等等，技术从JS/JQuery、Angularjs、React/Vue再到React，现在想想，依旧是剑未佩妥，我想这把剑应该是透明的看不见吧。</p><p>然而，在这样的路径下，我好像在一直不断地追框架，一直不断地学框架，而四年过去了，有些框架可以说是已死，比如曾以为经久不衰的JQuery，比如开启前端开发革命性模式的框架AngularJs，现在都已经无人问津，那么接下来呢？会不会出现新的框架？会不会在几年之后React/Vue也会死？甚至前端开发岗位会不会被自动化所取代？我想，这些是我必须要思考的问题。</p><p>当然，期间也有小插曲，比如：离职半年的全心考研，那是我对书本文化知识的再一次追求，对期待进入更高知识殿堂的又一次尝试。有遗憾也有小确幸，英语水平的进步、专业课的认识以及本专之差的体会，也为我之后一次性通过学位英语打下坚实的基础，再比如坑爹的九零后和摘星者的年会，有昏暗也有欣喜，愿昏暗化坦途，愿欣喜化动力，永远也不要停下前进的脚步。</p><p>疫情之下，每个人都忧心忡忡，各行各业也面临巨大挑战，没有办法，于是三月份回到广州工作，来到一家电商公司，工作了一个月研发部整体被裁，不过后来也发现，是项目不想养自己的团队而选择外包出去。在这之后，有幸的来到当下，有幸的遇到了一群快乐可爱并且技术能力非常牛的小伙伴，在这里拥抱了新版本的React，在这里挑战了之前没有遇到过的难题，可能说做出来的不是最优解，但也是如期圆满完成既定任务，后期还需要不断地迭代。其实，这不就恰似我们的生活吗，生活的过程，也是一个不断地遇到问题，解决问题的过程；是一个不断探索未知世界的过程；是一个不断深化自己世界观、人生观、价值观的过程，只要沉下心来，办法总比困难多。</p><p>时间再次往前翻，回顾这里过去的文字，总体概括为两个字：“记录”，记录一些应用案例，记录一些工作中遇到的问题，记录一些使用过的技术概念，很少有经过自己深度思考或者说是有深度的文章，以前，我可能追求一周一月要更新多少篇文字，我想之后，应该要更加追求质而不是量，更多的加入自己的思考，多问几个是什么（原理上是什么），为什么（为什么要这样设计），怎么样（这样设计有什么效益），形成有自己深度思考的文章，而不仅仅是复制、借鉴和记录。</p><p>往后，要重点打造自己的核心竞争力，更加注重全局观和整体观的培养，打造自己的架构能力，更多的是要从团队上、业务上去考虑问题。培养自己的快速学习能力，即可以快速运用新技术到项目中的能力，从整体出发，从全局出发，这是往后甚至以后很长一段时间需要做的事。当下最应该做的是褪去懒散，可以给自己定一个小目标，比如：研究生学历提升计划、一辆小车子、一笔自己的存款…当然，更切实际的就是，打造自己的构建组件库的能力，学习一些构建组件库的课程；培养自己的全栈技能，具体体现在学完华为全栈课程第三期；把已有的技能书籍和文学书籍看完吧，不要再让它吃灰了。</p><p>加油吧，青年！往后的日子还很长，多的是快乐和美好；我想，在春暖花开之际，在木棉绽放之乡，等一个更好的自己，等风又等你。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="生活杂录" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E5%BD%95/"/>
    
    
      <category term="人生" scheme="https://github.com/joydezhong/joydezhong.github.io.git/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>RN搭建环境出现的问题集合</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2021/02/22/RN%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2021/02/22/RN%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</id>
    <published>2021-02-22T13:45:00.000Z</published>
    <updated>2025-03-26T03:21:50.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>前言：使用React Native开发最好保持较为稳定的VPN环境，搭配Expo托管，配合Mac开发环境食用更佳，不然，可能就会像如下情况</p></blockquote><h4 id="1-由于墙的原因，可以尝试手动安装app">1. 由于墙的原因，可以尝试手动安装app</h4><p>由于国内网络环境问题，按钮expo工具包异常，可能会出现下面所示的错误：</p><font color='red'>ExpoKit builds constantly failing due to "getaddrinfo ENOTFOUND d1wp6m56sqw74a.cloudfront.net"</font><p>我们可以尝试下载对应的apk，放置目录：G:\AndroidSDK\platform-tools，手动安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install app_name.apk</span><br></pre></td></tr></table></figure><h4 id="2-模拟器需要调用硬件加速，而电脑设置关闭了">2. 模拟器需要调用硬件加速，而电脑设置关闭了</h4><p>模拟器需要调用硬件加速，而你的电脑默认关闭了硬件加速，则出现以下错误：</p><font color='red'>emulator: ERROR: x86 emulation currently requires hardware acceleration!Please ensure Intel HAXM is properly installed and usable.CPU acceleration status: HAX kernel module is not installed!</font><p>需要在安卓SDK找到<code>intelhaxm-android.exe</code>安装，还可能需要在Boise里面开启VT设置（Virtualization Technology）</p><h4 id="3-gradle工具包版本太低">3. gradle工具包版本太低</h4><font color='red'>java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.reflection.ReflectionCachejava.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.vmplugin.v7.Java7</font><p>错误原因：gradle版本太低，修改<code>gradle-wrapper.properties</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-6.3-all.zip</span><br></pre></td></tr></table></figure><h4 id="4-模拟器无响应或者相应时间过长">4.模拟器无响应或者相应时间过长</h4><font color='red'>Couldn't start project on Android: Error running adb: It took too long to start the Android emulator: Pixel_3a. You can try starting the emulator manually from the terminal</font><p>打开模拟器时间过长，可以尝试手动打开</p><p>到安卓SDK的emulator目录下使用<code>emulator -avd Pixel_3a</code>打开对应名称的模拟器</p><p>使用<code>emulator -list-avds</code>查看所有模拟器列表</p><h5 id="最后，放弃安卓studio模拟器吧，用夜神都比较香。">最后，放弃安卓studio模拟器吧，用夜神都比较香。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/react/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue仿支付宝密码输入弹框</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2020/11/23/vue%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E6%A1%86/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2020/11/23/vue%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E6%A1%86/</id>
    <published>2020-11-23T13:04:00.000Z</published>
    <updated>2025-03-26T03:21:50.981Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>上一篇文章，我们使用react来模拟了类似移动端的这种密码输入效果，见详见<a href="http://www.zhongweipeng.cn/2020/11/12/react%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E5%BC%B9%E6%A1%86/">链接</a>，在这篇中，我们使用vue来实现类似的效果，思路基本和上一篇类型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;code-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;code-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(index, item) in number&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; code[item] &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;code-input&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;code&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:maxlength</span>=<span class="string">&quot;number&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">input</span>=<span class="string">&quot;inputOn&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">oninput</span>=<span class="string">&quot;if(value.length&gt;5)value=value.slice(0,6)&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">code</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">number</span>: <span class="number">6</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">inputOn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发送</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// if (this.code.length &gt;= this.number) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   this.$emit(&#x27;senCode&#x27;, this.code)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.code-wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.code-item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">1.82rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">1.82rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">1.09rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">0.02rem</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: normal;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.code-input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">1.09rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: none;</span></span><br><span class="line"><span class="language-css">      -webkit-<span class="attribute">appearance</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单的密码输入弹框案例完成，详见<a href="https://codesandbox.io/s/vue-fakealipay-password-5ioj4">在线演示</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>react仿支付宝密码输入弹框</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2020/11/12/react%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E5%BC%B9%E6%A1%86/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2020/11/12/react%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E5%BC%B9%E6%A1%86/</id>
    <published>2020-11-12T14:12:00.000Z</published>
    <updated>2025-03-26T03:21:50.892Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经常看到移动端的密码输入框包括微信、支付宝都很美观，这里使用react简单的模拟了一个类似的输入弹框。</p><p>先说一下思路：密码一般都是六位，在视觉上给每个数字加上边框看起来似乎是留个单独的input，其实不然，下面代码的实现通过一个input做输入，然后把输入的位数渲染到带边框的容器中，这样是实现了类似的效果。</p><p>类型Vue的案例实现见上面一篇文章。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyModal.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Modal</span>, <span class="title class_">Button</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyModal</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;&#123;&#125;&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [visible, setVisible] = useState&lt;boolean&gt;(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState&lt;boolean&gt;(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [code, setCode] = useState&lt;string&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = useState&lt;number[]&gt;([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onChange</span> = (<span class="params">e: any</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> v = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">setCode</span>(v);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleConfirm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setVisible</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setVisible</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setVisible(true)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        点击弹框</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Modal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">width</span>=<span class="string">&#123;704&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;确认支付&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">visible</span>=<span class="string">&#123;visible&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onOk</span>=<span class="string">&#123;handleConfirm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onCancel</span>=<span class="string">&#123;handleCancel&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">destroyOnClose</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">maskClosable</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">cancelText</span>=<span class="string">&quot;取消&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">okText</span>=<span class="string">&quot;确认&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">confirmLoading</span>=<span class="string">&#123;loading&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;payContainer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span>请输入支付密码<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;inputBox&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;number.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;codeItem&quot;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;code[index]&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ))&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Input.Password</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">className</span>=<span class="string">&quot;codeInput&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">value</span>=<span class="string">&#123;code&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">maxLength</span>=<span class="string">&#123;number.length&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">visibilityToggle</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyModal</span>;</span><br></pre></td></tr></table></figure><p>css样式文件处理</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.payContainer</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">90px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#6b778c</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inputBox</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">336px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.codeItem</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ebecf0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.codeInput</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="attribute">caret-color</span>: <span class="number">#ebecf0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">48px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">336px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">  -webkit-<span class="attribute">appearance</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.codeInput</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的密码输入弹框案例完成，详见<a href="https://codesandbox.io/s/react-fakealipay-password-1uxd9">在线演示</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/react/"/>
    
    
  </entry>
  
  <entry>
    <title>代码改错分支，如何挽救</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2020/11/06/%E4%BB%A3%E7%A0%81%E6%94%B9%E9%94%99%E5%88%86%E6%94%AF/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2020/11/06/%E4%BB%A3%E7%A0%81%E6%94%B9%E9%94%99%E5%88%86%E6%94%AF/</id>
    <published>2020-11-06T13:40:00.000Z</published>
    <updated>2025-03-26T03:21:51.314Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有时候，会出现代码提交在错误的分支或者在错误的分支上修改，如果代码已经推送，可以采取版本回退释放暂存的方法；如果代码仅仅是提交，可以采取选择commit来操作。</p><p><strong>代码只是做了commit提交操作</strong><br>以下的操作可以使Git把当前分支上的修改转移到另一个分支上：</p><p>1.获取本次commit的ID<br>（会获取到一个长id如：50734f7dfbaf1401b095ce658efa3d5a2fhjfb1d）</p><p>以下命令可以直接获取最新的commit ID：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取最新的commit id</span></span><br><span class="line">git rev-parse <span class="variable constant_">HEAD</span></span><br></pre></td></tr></table></figure><p>以下命令可以获取git的所有提交日志：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有提交日志，commit后面的那串为所找的id</span></span><br><span class="line">git log</span><br></pre></td></tr></table></figure><p>2.切换到新分支</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout newBranch</span><br></pre></td></tr></table></figure><p>3.选择对应的commit进行操作</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick <span class="number">50734</span>f7dfbaf1401b095ce658efa3d5a2fhjfb1d</span><br></pre></td></tr></table></figure><p>4.所有修改过的代码已提交到了当前新分支，git push 就好</p><p><strong>代码push到新的分支</strong><br>以下的操作可以使Git版本回退并操作暂存的改变：</p><p>1.利用git log查看版本并回退</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset 目标版本号</span><br></pre></td></tr></table></figure><p>2.暂存变更</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>3.切换到对应的分支</p><p>4.释放暂存</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Git" scheme="https://github.com/joydezhong/joydezhong.github.io.git/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>formily的几个核心概念</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2020/10/23/formily%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2020/10/23/formily%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</id>
    <published>2020-10-23T14:06:00.000Z</published>
    <updated>2025-03-26T03:21:50.750Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、JOSN-Schema描述">1、JOSN Schema描述</h3><p>formily 是阿里推出的一套动态化表单的解决方案，用于解决传统模式下写动态表带时代码冗余大、性能低、可维护性差的问题，formily 表单采用标准的 JSON Schema 进性描述，可简单的理解为规范化的 JSON 用于描述 form 表单，比如，下面几个字段规范的定义：</p><blockquote><p>type: 字段的数据类型，可以是简单或者复杂数据类型；<br>properties：对象属性，通俗用于对象嵌套描述；<br>x-rules: 字段校验属性，Array类型，支持通用的必填、正则校验、函数校验以及错误信息提示；<br>x-component：字段组件属性，可注入对于的表单组件，相当于FormItem，比如Input、Select等，也可以是CustomComponent，通过渲染层注入组件即可；<br>x-component-props：用于x-component中指定的组件的属性，相当于FormItem的属性。</p></blockquote><p>（因文章篇幅有限，这里仅列举部分伪代码，详细代码见文章底部链接）</p><p>一个简单的 Formily 表单可写成如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx</span></span><br><span class="line">&lt;<span class="title class_">SchemaForm</span></span><br><span class="line">  labelCol=&#123;<span class="number">24</span>&#125;</span><br><span class="line">  wrapperCol=&#123;<span class="number">24</span>&#125;</span><br><span class="line">  components=&#123;&#123;</span><br><span class="line">    <span class="title class_">Input</span>,</span><br><span class="line">    <span class="title class_">Select</span>,</span><br><span class="line">    <span class="title class_">CheckboxGroup</span>: <span class="title class_">Checkbox</span>.<span class="property">Group</span>,</span><br><span class="line">    <span class="title class_">RadioGroup</span>: <span class="title class_">Radio</span>.<span class="property">Group</span>,</span><br><span class="line">    <span class="title class_">RangePicker</span>: <span class="title class_">DatePicker</span>.<span class="property">RangePicker</span>,</span><br><span class="line">    <span class="title class_">Upload</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">  schema=&#123;simpleSchema&#125;</span><br><span class="line">  onSubmit=&#123;<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">FormButtonGroup</span> <span class="attr">offset</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Submit</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">Submit</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Reset</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">Reset</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">FormButtonGroup</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">SchemaForm</span>&gt;</span><br></pre></td></tr></table></figure><p>Schema 文件描述：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// schema</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> simpleSchema = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">input</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;输入&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;Input&quot;</span>,</span><br><span class="line">      <span class="string">&quot;x-component-props&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">placeholder</span>: <span class="string">&quot;请输入&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">select</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;下拉选&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;x-component-props&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">placeholder</span>: <span class="string">&quot;请选择&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">enum</span>: [</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&quot;选项一&quot;</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&quot;选项二&quot;</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;select&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">radio</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;单选&quot;</span>,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;RadioGroup&quot;</span>,</span><br><span class="line">      <span class="attr">enum</span>: [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">checkbox</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;复选&quot;</span>,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;CheckboxGroup&quot;</span>,</span><br><span class="line">      <span class="attr">enum</span>: [</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&quot;One&quot;</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&quot;Two&quot;</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">label</span>: <span class="string">&quot;Three&quot;</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dateRange</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;时间范围&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">properties</span>: &#123;</span><br><span class="line">        <span class="string">&quot;[start,end]&quot;</span>: &#123;</span><br><span class="line">          <span class="comment">// title: &quot;RangePicker&quot;,</span></span><br><span class="line">          <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;RangePicker&quot;</span>,</span><br><span class="line">          <span class="string">&quot;x-component-props&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">placeholder</span>: [<span class="string">&quot;开始时间&quot;</span>, <span class="string">&quot;结束时间&quot;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">upload</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;array&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;图片&quot;</span>,</span><br><span class="line">      <span class="string">&quot;x-component-props&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">listType</span>: <span class="string">&quot;picture-card&quot;</span>,</span><br><span class="line">        <span class="attr">action</span>: <span class="string">&quot;https://www.mocky.io/v2/5cc8019d300000980a055e76&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;upload&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;仅支持图片类数据上传&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2、表单的生命周期-状态">2、表单的生命周期/状态</h3><p>在formily中，一切的联动操作都源自生命周期函数，可分为表单的生命周期函数和表单字段的操作，在表单的 effects 中实现对于的逻辑操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx</span></span><br><span class="line">&lt;<span class="title class_">SchemaForm</span></span><br><span class="line">  labelCol=&#123;<span class="number">24</span>&#125;</span><br><span class="line">  wrapperCol=&#123;<span class="number">24</span>&#125;</span><br><span class="line">  components=&#123;&#123;</span><br><span class="line">    <span class="title class_">Input</span>,</span><br><span class="line">    <span class="title class_">Select</span>,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  schema=&#123;basicSchema&#125;</span><br><span class="line">  actions=&#123;basicAction&#125;</span><br><span class="line">  effects=&#123;<span class="function">(<span class="params">$, &#123; setFieldState &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    $(<span class="string">&quot;onFieldValueChange&quot;</span>, <span class="string">&quot;classType&quot;</span>).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">parentState</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setFieldState</span>(<span class="string">&quot;currentToggle&quot;</span>, <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">visible</span> = parentState.<span class="property">value</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="title function_">setFieldState</span>(<span class="string">&quot;currentStatus&quot;</span>, <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">value</span> = parentState.<span class="property">value</span> ? <span class="string">&quot;显示&quot;</span> : <span class="string">&quot;隐藏&quot;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  onSubmit=&#123;<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">FormButtonGroup</span> <span class="attr">offset</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Submit</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">Submit</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Reset</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">Reset</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">FormButtonGroup</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">SchemaForm</span>&gt;</span><br></pre></td></tr></table></figure><p>Schema 文件描述：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// schmema</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> basicSchema = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">classType</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">      <span class="attr">enum</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">label</span>: <span class="string">&quot;显示&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">label</span>: <span class="string">&quot;隐藏&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;联动①&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;select&quot;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&quot;利用生命周期做联动&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">currentToggle</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;联动①组件&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;Input&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">currentStatus</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;联动①状态&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;Input&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上述案例所示，我们在 SchemaForm 的 effects 中通过订阅生命周期函数来监听字段状态的变化，从而达到表单联动的效果；以上是一种写法，触发生命周期还有另一种写法，通过解构出 FormEffectHooks 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormEffectHooks</span>, createFormActions &#125; <span class="keyword">from</span> <span class="string">&#x27;@formily/next&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; onFieldValueChange$, onFormInit$ &#125; = <span class="title class_">FormEffectHooks</span></span><br><span class="line"><span class="keyword">const</span> &#123; setFieldState, getFieldState &#125; = <span class="title function_">createFormActions</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单初始化完成后，执行将字段aa的值修改为123</span></span><br><span class="line"><span class="title function_">onFormInit$</span>().<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setFieldValue</span>(<span class="string">&#x27;aa&#x27;</span>, <span class="number">123</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当字段bb的值发生变化后，修改字段cc的显示隐藏状态</span></span><br><span class="line"><span class="title function_">onFieldValueChange$</span>(<span class="string">&#x27;bb&#x27;</span>).<span class="title function_">subscribe</span>( <span class="function"><span class="params">fieldState</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fieldState为bb的当前状态值</span></span><br><span class="line">  <span class="title function_">setFieldState</span>(<span class="string">&#x27;cc&#x27;</span>, <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// state为cc的当前状态值，根据字段bb的值是否为123来决定cc的隐藏属性。</span></span><br><span class="line">    state.<span class="property">visible</span> = fieldState.<span class="property">value</span> === <span class="number">123</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>表单的生命周期函数有很多种，详见<a href="https://formilyjs.org/#/0yTeT0/aAIRIjiou6">官方文档</a>，一些常用的生命周期函数如下：</p><table style="word-break: break-all"><thead>   <tr>      <th>常量名</th>      <th>常量值</th>      <th style="width:150px">描述</th>      <th>Hook</th>      <th>返回值</th>   </tr>   </thead>   <tbody>   <tr>      <td>ON_FORM_SUBMIT</td>      <td>onFormSubmit</td>      <td style="width:150px">表单提交时触发</td>      <td>onFormSubmit$</td>      <td>FormState</td>   </tr>   <tr>      <td>ON_FORM_RESET</td>      <td>onFormReset</td>      <td style="width:150px">表单重置时触发</td>      <td>onFormReset$</td>      <td>FormState</td>   </tr>   <tr>      <td>ON_FIELD_CHANGE</td>      <td>onFieldChange</td>      <td style="width:150px">字段状态发生变化时触发</td>      <td>onFieldChange$</td>      <td>FieldState</td>   </tr>   <tr>      <td>ON_FIELD_INPUT_CHANGE</td>      <td>onFieldInputChange</td>      <td style="width:150px">字段输入事件触发时触发</td>      <td>onFieldInputChange$</td>      <td>FieldState</td>   </tr>   <tr>      <td>ON_FIELD_VALUE_CHANGE</td>      <td>onFieldValueChange</td>      <td style="width:150px">字段值变化时触发</td>      <td>onFieldValueChange$</td>      <td>FieldState</td>   </tr>   </tbody></table><h3 id="3、表单操作actions-effects">3、表单操作actions/effects</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsx</span></span><br><span class="line"><span class="comment">// 片段一</span></span><br><span class="line">$(<span class="string">&quot;onFieldValueChange&quot;</span>, <span class="string">&quot;classType&quot;</span>).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">parentState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setFieldState</span>(<span class="string">&quot;currentToggle&quot;</span>, <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">visible</span> = parentState.<span class="property">value</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 片段二</span></span><br><span class="line"><span class="title function_">onFieldValueChange$</span>(<span class="string">&#x27;bb&#x27;</span>).<span class="title function_">subscribe</span>( <span class="function"><span class="params">fieldState</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setFieldState</span>(<span class="string">&#x27;cc&#x27;</span>, <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">visible</span> = fieldState.<span class="property">value</span> === <span class="number">123</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面只演示了两段伪代码片段，详情功能可参考上一小节表单的生命周期的代码，我们只需要知道：<strong>所有的联动操作都需要在effects实现，而操作Form API都通过actions来控制</strong>，详细接口参考<a href="https://formilyjs.org/#/zoi8i0/6dt3t7FjI4">文档链接</a>。</p><h3 id="4、表单的路径系统">4、表单的路径系统</h3><p>表单的路径系统相当于CSS中的选择器，可以通过路径系统来匹配需要操作的字段；这里的匹配方式大概可分为两种，一种是通配符匹配，另一种是target目标匹配。</p><p><strong>4.1 通配符匹配</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通配符匹配 匹配array字段下任意字段之后是aa的字段（array -&gt; 任意 -&gt; aa）</span></span><br><span class="line"><span class="title function_">onFieldValueChange$</span>(<span class="string">&#x27;array.*.aa&#x27;</span>).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">parentState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 通配符匹配 当aa字段值改变后匹配所有的bb、cc、dd字段</span></span><br><span class="line"><span class="title function_">onFieldValueChange$</span>(<span class="string">&#x27;aa&#x27;</span>).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">&#123; name, value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setFieldState</span>(<span class="string">&#x27;*(bb,cc,dd)&#x27;</span>, <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">visible</span> = value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4.2 target目标匹配</strong></p><p>target 相邻查找</p><ul><li>prevPath.[].fieldName代表当前行字段</li><li>prevPath.[+].fieldName代表下一行字段</li><li>prevPath.[-].fieldName代表上一行字段</li><li>prevPath.[+2].fieldName代表下下一行字段</li><li>prevPath.[-2].fieldName代表上上一行字段<br><em>一次可以继续往下递增或者递减</em></li></ul><p>target 向前路径查找</p><ul><li>.path.a.b代表基于当前字段路径往后计算</li><li>…path.a.b代表往前计算相对路径</li><li>…path.a.b代表继续往前计算相对路径<br><em>以此类推</em></li></ul><h3 id="5、x-linkages属性简单联动">5、x-linkages属性简单联动</h3><p>上面说到，一切的联动都源自生命周期，而 x-linkages 用于在协议层描述简单联动，注意，这个只是简单联动，它无法描述异步联动，也无法描述联动过程中的各种复杂数据处理，以下是一个简单的联动案例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">SchemaForm</span></span><br><span class="line">  labelCol=&#123;<span class="number">24</span>&#125;</span><br><span class="line">  wrapperCol=&#123;<span class="number">24</span>&#125;</span><br><span class="line">  components=&#123;components&#125;</span><br><span class="line">  schema=&#123;basicSchema&#125;</span><br><span class="line">  actions=&#123;basicAction&#125;</span><br><span class="line">  onSubmit=&#123;<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">FormButtonGroup</span> <span class="attr">offset</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Submit</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">Submit</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Reset</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">Reset</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">FormButtonGroup</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">SchemaForm</span>&gt;</span><br></pre></td></tr></table></figure><p>Schema描述文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> basicSchema = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">linkTwo</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">      <span class="attr">enum</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">label</span>: <span class="string">&quot;联动②显示&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">label</span>: <span class="string">&quot;联动②隐藏&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">label</span>: <span class="string">&quot;联动②控制schema的title字段&quot;</span>,</span><br><span class="line">          <span class="attr">value</span>: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;联动②&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;select&quot;</span>,</span><br><span class="line">      <span class="string">&quot;x-linkages&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;value:visible&quot;</span>,</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&quot;linkTwoEle&quot;</span>,</span><br><span class="line">          <span class="attr">condition</span>: <span class="string">&quot;&#123;&#123; $value === 1 || $value === 3 &#125;&#125;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;value:schema&quot;</span>,</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&quot;linkTwoEle&quot;</span>,</span><br><span class="line">          <span class="attr">condition</span>: <span class="string">&quot;&#123;&#123; $value === 3 &#125;&#125;&quot;</span>, <span class="comment">//当值为3时发生联动</span></span><br><span class="line">          <span class="attr">schema</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;这是联动的标题&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">description</span>:</span><br><span class="line">        <span class="string">&quot;利用 x-linkages 属性做联动，这个只是简单联动，它无法描述异步联动，也无法描述联动过程中的各种复杂数据处理。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">linkTwoEle</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;联动②组件&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">properties</span>: &#123;</span><br><span class="line">        <span class="string">&quot;[start,end]&quot;</span>: &#123;</span><br><span class="line">          <span class="comment">// title: &quot;RangePicker&quot;,</span></span><br><span class="line">          <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;RangePicker&quot;</span>,</span><br><span class="line">          <span class="string">&quot;x-component-props&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">placeholder</span>: [<span class="string">&quot;开始时间&quot;</span>, <span class="string">&quot;结束时间&quot;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里 link 联动的 Type 类型主要有三种：</p><ul><li>value:state，由值变化控制指定字段的状态</li><li>value:visible，由值变化控制指定字段显示隐藏</li><li>相当于 value:state 的一种特例情况，即 state.visible</li><li>value:schema，由值变化控制指定字段的 schema. 相当于 value:state 的一种特例情况，即 state.props</li></ul><p>condition 为link联动触发的条件，target 为上小节描述的target目标匹配。</p><h3 id="6、表单的扩展机制（自定义生命周期、自定义扩展状态、自定义校验规则、自定义组件）">6、表单的扩展机制（自定义生命周期、自定义扩展状态、自定义校验规则、自定义组件）</h3><p><strong>6.1 自定义生命周期: 自定义事件派发</strong></p><p>自定义事件大概可分为两种：一是通过 createFormActions 全局派发事件，二是在 effects 逻辑联动中通过 notify 来派发事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> extendAction = <span class="title function_">createFormActions</span>();</span><br><span class="line"><span class="comment">// 全局自定义事件</span></span><br><span class="line">extendAction.<span class="title function_">dispatch</span>(<span class="string">&quot;customEvent1&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">666</span>, <span class="attr">text</span>: <span class="string">&quot;全局的payload&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">myFormily</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">SchemaForm</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">labelCol</span>=<span class="string">&#123;24&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">wrapperCol</span>=<span class="string">&#123;24&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">components</span>=<span class="string">&#123;components&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">schema</span>=<span class="string">&#123;extendSchema&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">actions</span>=<span class="string">&#123;extendAction&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">effects</span>=<span class="string">&#123;($,</span> &#123; <span class="attr">notify</span> &#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">      // effect派发自定义事件</span></span><br><span class="line"><span class="language-xml">      $(&quot;onFieldValueChange&quot;, &quot;a2&quot;).subscribe((parentState) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        notify(&quot;customEvent2&quot;, parentState);</span></span><br><span class="line"><span class="language-xml">      &#125;);</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    onSubmit=&#123;(values) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">      console.log(values);</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  &gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">FormButtonGroup</span> <span class="attr">offset</span>=<span class="string">&#123;0&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Submit</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">Submit</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Reset</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">Reset</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">FormButtonGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">SchemaForm</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myFormily;</span><br></pre></td></tr></table></figure><p>派发事件之后，需要在自定义组件内通过 useFormEffects 监听自定义事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件内通过 useFormEffects 监听自定义事件</span></span><br><span class="line"><span class="title function_">useFormEffects</span>(<span class="function">(<span class="params">$, &#123; notify, setFieldState, getFieldState &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  $(<span class="string">&quot;customEvent1&quot;</span>).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(payload);</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">&quot;customEvent2&quot;</span>).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(payload);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>6.2 自定义扩展状态：自定义formily组件状态</strong></p><p>表单的自定义状态在自定义组件中使用的比较多，类似于 react Hook 的形式，仅有两种形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useFieldState, useFormState &#125; <span class="keyword">from</span> <span class="string">&#x27;@formily/next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为当前组件对应的字段中添加自定义的状态字段extendState1和extendState2.</span></span><br><span class="line"><span class="keyword">const</span> [state, setFieldState] = <span class="title function_">useFieldState</span>(&#123;</span><br><span class="line">  <span class="attr">extendState1</span>: <span class="string">&#x27;something&#x27;</span>,</span><br><span class="line">  <span class="attr">extendState2</span>: <span class="string">&#x27;something&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//为当前组件所在的表单中添加自定义的状态字段extendState1和extendState2.</span></span><br><span class="line"><span class="keyword">const</span> [formState, setFormState] = <span class="title function_">useFormState</span>(&#123;</span><br><span class="line">  <span class="attr">extendState1</span>: <span class="string">&#x27;something&#x27;</span>,</span><br><span class="line">  <span class="attr">extendState2</span>: <span class="string">&#x27;something&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>自定义状态字段和系统提供的状态字段一致，自定义状态改变会也触发 onFieldChange 或 onFormChange 事件。</p><p><strong>6.3 自定义组件: 自定义字段组件和虚拟布局组件</strong></p><p>Formily 可以通过自定义组件来满足更加复杂的业务需求，通过给组件添加 isFieldComponent 属性即可，一个简单的字段组件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useFormEffects, useFieldState &#125; <span class="keyword">from</span> <span class="string">&quot;@formily/antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CustomFieldComponent</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value, schema, className, editable, path, mutators, form &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取”x-component-props&quot;的属性值</span></span><br><span class="line">  <span class="keyword">const</span> componentProps = schema.<span class="title function_">getExtendsComponentProps</span>() || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> <span class="attr">14</span> &#125;&#125;&gt;</span>这是自定义字段组件描述<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;value</span> || &quot;&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> mutators.change(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CustomFieldComponent</span>.<span class="property">isFieldComponent</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CustomFieldComponent</span>;</span><br></pre></td></tr></table></figure><p>当然，Formily 也提供 registerVirtualBox 方法自定义虚拟组件，主要用于表单布局方面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册virtual组件 一般用于布局</span></span><br><span class="line"><span class="title function_">registerVirtualBox</span>(<span class="string">&quot;CustomLayout&quot;</span>, <span class="function">(<span class="params">&#123; children, schema &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &quot;<span class="attr">1px</span> <span class="attr">solid</span> <span class="attr">red</span>&quot;, <span class="attr">padding:</span> <span class="attr">10</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;schema[&quot;x-component-props&quot;][&quot;say&quot;]&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>组件定义好后，可以通过局部注册、全局注册、全局批量扩展三种方式注入到Formily表单系统中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//局部实例注册</span></span><br><span class="line">&lt;<span class="title class_">SchemaForm</span> components=&#123;&#123; <span class="title class_">CustomComponent</span>, <span class="title class_">CustomFieldComponent</span> &#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局注册</span></span><br><span class="line"><span class="title function_">registerFormField</span>(<span class="string">&#x27;CustomComponent2&#x27;</span>, <span class="title function_">connect</span>()(<span class="title class_">CustomComponent</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局批量扩展</span></span><br><span class="line"><span class="title function_">registerFormFields</span>(&#123; <span class="title class_">CustomComponent3</span>: <span class="title function_">connect</span>()(<span class="title class_">CustomComponent</span>) &#125;)</span><br></pre></td></tr></table></figure><p><strong>6.4 自定义校验：自定义x-rules校验、自定义函数验证</strong></p><p>在校验中，Formily也提供两种校验方式，一种是直接在schema中定义 x-rules 校验，另一种是通过自定义校验函数来校验，后一种方式常用于校验函数复用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  registerValidationRules</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@formily/antd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义函数校验</span></span><br><span class="line"><span class="title function_">registerValidationRules</span>(&#123;</span><br><span class="line">  <span class="attr">customRule2</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="string">&quot;123&quot;</span> ? <span class="string">&quot;不能等于123&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Schema描述文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> extendSchema = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">a1</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;x-rules校验&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;input&quot;</span>,</span><br><span class="line">      <span class="string">&quot;x-rules&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">validator</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> value === <span class="string">&quot;123&quot;</span> ? <span class="string">&quot;不能等于123&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">a3</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;自定义函数校验&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;x-component&quot;</span>: <span class="string">&quot;Input&quot;</span>,</span><br><span class="line">      <span class="string">&quot;x-rules&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">customRule2</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>github案例详见 <a href="https://github.com/joydezhong/formily-demo/tree/master">github仓库</a></p></blockquote><blockquote><p>在线演示案例详见 <a href="https://codesandbox.io/s/formily-complex-ru1dk">codesandbox案例</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/react/"/>
    
    
  </entry>
  
  <entry>
    <title>JS常见的数据格式处理</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2020/08/15/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2020/08/15/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</id>
    <published>2020-08-15T14:55:00.000Z</published>
    <updated>2025-03-26T03:21:52.063Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>开发中后台项目的时候，前端最多的就是 JS 的数据处理，过滤、转换、合并等等，这里收集了工作中常见的数据处理的方式，并持续更新。</p><h4 id="数组对象去重">数组对象去重</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> params = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Lina&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Lina&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> resultParams = <span class="title class_">Object</span>.<span class="title function_">values</span>(params.<span class="title function_">reduce</span>(<span class="function">(<span class="params">item, next</span>) =&gt;</span> &#123;</span><br><span class="line">  item[next.<span class="property">id</span>] = next</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;,&#123;&#125;))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultParams)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [&#123;id: 1, name: &#x27;Lina&#x27;&#125;,&#123;id: 2, name: &#x27;Bob&#x27;&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="数组对象过滤">数组对象过滤</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> paramsList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Lina&#x27;</span>,</span><br><span class="line">    <span class="attr">isEnable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    <span class="attr">isEnable</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="attr">isEnable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> enableList = paramsList.<span class="title function_">filter</span>(<span class="function"><span class="params">_item</span> =&gt;</span> _item.<span class="property">isEnable</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(enableList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [&#123;id: 1, name: &#x27;Lina&#x27;, isEnable: true&#125;, &#123;id: 3, name: &#x27;Tom&#x27;, isEnable: true&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="对象转换为数组">对象转换为数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Lina&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(o)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(o)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [&quot;id&quot;, &quot;name&quot;]</span></span><br><span class="line"><span class="comment">// [1, &quot;Lina&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="数组对象转为大对象">数组对象转为大对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> attrArrayWithObj = [&#123;<span class="attr">aa</span>: <span class="string">&#x27;11&#x27;</span>, <span class="attr">bb</span>: <span class="string">&#x27;22&#x27;</span>, <span class="attr">cc</span>: <span class="string">&#x27;33&#x27;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> attrWithObj = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> t <span class="keyword">of</span> attrArrayWithObj )&#123;</span><br><span class="line">  attrWithObj = &#123;...attrWithObj, ...t&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;aa: &quot;11&quot;, bb: &quot;22&quot;, cc: &quot;33&quot;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="提取数组对象中特定的值作为一个数组">提取数组对象中特定的值作为一个数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name: &#x27;</span>小白<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    &#x27;</span>id<span class="string">&#x27;: &#x27;</span><span class="number">3</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;</span>name<span class="string">&#x27;: &#x27;</span>小黄<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 使用map()生成数组</span></span><br><span class="line"><span class="string">let new_arr = arr.map(obj =&gt; &#123;return obj.name&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 输出 [&#x27;</span>小红<span class="string">&#x27;,&#x27;</span>小白<span class="string">&#x27;,&#x27;</span>小黄<span class="string">&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="SKU组合算法（用于商品或购物）">SKU组合算法（用于商品或购物）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> SUK组合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">[[],[]..]</span>&#125; chunks 传入不同的属性值数组进行组合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SKUCombine</span> = (<span class="params">arr: any[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.<span class="property">length</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[<span class="number">0</span>].<span class="property">children</span>)</span><br><span class="line">      arr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item: any</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> item = item.<span class="property">children</span></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="property">length</span> === <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> arrySon = []</span><br><span class="line">      arr[<span class="number">0</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">_: any, index: React.ReactText</span>) =&gt;</span> &#123;</span><br><span class="line">        arr[<span class="number">1</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">_: any, index1: React.ReactText</span>) =&gt;</span> &#123;</span><br><span class="line">          arrySon.<span class="title function_">push</span>([].<span class="title function_">concat</span>(arr[<span class="number">0</span>][index], arr[<span class="number">1</span>][index1]))</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      arr[<span class="number">0</span>] = arrySon</span><br><span class="line">      arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">      <span class="comment">// 递归</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">SKUCombine</span>(arr)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找出数组对象中符合条件的某项的某个值">找出数组对象中符合条件的某项的某个值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>, </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Lina&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Bob&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">find</span>(<span class="function"><span class="params">__item</span> =&gt;</span> __item.<span class="property">name</span>===<span class="string">&#x27;Tom&#x27;</span>).<span class="property">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组对象按属性对object分类">数组对象按属性对object分类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Max&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">groupBy</span>(<span class="params">objectArray, property</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> objectArray.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">acc, obj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = obj[property];</span><br><span class="line">    <span class="keyword">if</span> (!acc[key]) &#123;</span><br><span class="line">      acc[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    acc[key].<span class="title function_">push</span>(obj)</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> groupedPeople = <span class="title function_">groupBy</span>(people, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; 20: [&#123; name: &#x27;Max&#x27;, age: 20 &#125;,&#123; name: &#x27;Jane&#x27;, age: 20 &#125;], 21: &#123; name: &#x27;Alice&#x27;, age: 21 &#125; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="一维数组转为键值对象">一维数组转为键值对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>]</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b, idx</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (idx % <span class="number">2</span>) &#123;</span><br><span class="line">      a[<span class="title class_">Math</span>.<span class="title function_">ceil</span>(idx / <span class="number">2</span>) - <span class="number">1</span>].<span class="property">lat</span> = b</span><br><span class="line">      <span class="keyword">return</span> a</span><br><span class="line">  &#125; <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> [...a, &#123;<span class="attr">lng</span>: b&#125;]</span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line"><span class="comment">// [&#123;lng: 11, lat: 22&#125;,</span></span><br><span class="line"><span class="comment">// &#123;lng: 33, lat: 44&#125;,</span></span><br><span class="line"><span class="comment">// &#123;lng: 55, lat: 66&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="二维数组转为一维数组">二维数组转为一维数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].<span class="title function_">reduce</span>(</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="title function_">concat</span>(b);</span><br><span class="line">  &#125;,</span><br><span class="line">  []</span><br><span class="line">);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="js-数组过滤空值（undefined、null、-、0、false、NaN）">js 数组过滤空值（undefined、null、&quot;&quot;、0、false、NaN）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="literal">undefined</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="title class_">NaN</span>, <span class="number">1</span>, <span class="number">2</span>].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br></pre></td></tr></table></figure><h4 id="向上递归找所有父级">向上递归找所有父级</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arr1: 树形数组；</span></span><br><span class="line"><span class="comment"> * id: 指定的id </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">familyTree</span> (<span class="params">arr1, id</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> temp = []</span><br><span class="line">  <span class="keyword">var</span> forFn = <span class="keyword">function</span> (<span class="params">arr, id</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> item = arr[i]</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">id</span> === id) &#123;</span><br><span class="line">        temp.<span class="title function_">push</span>(item)</span><br><span class="line">        <span class="title function_">forFn</span>(arr1, item.<span class="property">parentId</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">children</span>) &#123;</span><br><span class="line">          <span class="title function_">forFn</span>(item.<span class="property">children</span>, id)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">forFn</span>(arr1, id)</span><br><span class="line">  <span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="借助lodash和moment-js获取日期段的每一天">借助lodash和moment.js获取日期段的每一天</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先安装moment</span></span><br><span class="line"><span class="comment">// npm i moment</span></span><br><span class="line"><span class="comment">// 再安装Lodash，可以用它内部封装好的方法，简单实用</span></span><br><span class="line"><span class="comment">// npm i lodash</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&quot;moment&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设需要查询2019-06-25至2019-12-31号之间每一天的00:00至23:59这个时间段的数据</span></span><br><span class="line"><span class="comment">// 将时间转换为moment时间格式</span></span><br><span class="line"><span class="keyword">const</span> start = <span class="string">&quot;2019-06-25&quot;</span>;  <span class="comment">// 开始时间</span></span><br><span class="line"><span class="keyword">const</span> start_time = <span class="title function_">moment</span>(start);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">moment</span>(start_time));  <span class="comment">// moment(&quot;2019-06-25T00:00:00.000&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> end = <span class="string">&quot;2019-12-31&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> end_time = <span class="title function_">moment</span>(end).<span class="title function_">endOf</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(end_time);  <span class="comment">// endOf(&quot;d&quot;)为当天的结束时间 moment(&quot;2019-12-31T23:59:59.999&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始计算这两个时间段相差的天数</span></span><br><span class="line"><span class="keyword">const</span> diff_times = end_time.<span class="title function_">diff</span>(start_time,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(diff_times);  <span class="comment">// 189</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lodash中内置的循环器，可以指定循环次数</span></span><br><span class="line"><span class="comment">// 再定义一个数组，用来存放相差的每一天日期</span></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line">_.<span class="title function_">times</span>(diff_times, <span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//每次重新初始化开始时间，因为我碰到了深拷贝的问题</span></span><br><span class="line">  <span class="keyword">const</span> new_start_time = <span class="title function_">moment</span>(start_time);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//数组下标从０开始，可以用它进行每次的天数递增</span></span><br><span class="line">  arr.<span class="title function_">push</span>(new_start_time.<span class="title function_">add</span>(i, <span class="string">&quot;days&quot;</span>).<span class="title function_">format</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* [ &#x27;2019-06-25&#x27;,&#x27;2019-06-26&#x27;,&#x27;2019-06-27&#x27;,&#x27;2019-06-28&#x27;, ...] */</span></span><br></pre></td></tr></table></figure><h4 id="同时检验字符串和中文字符数">同时检验字符串和中文字符数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * maxByte: number 最大字符数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">validatorByte</span> = (<span class="params">rule, value, callback, maxByte: number</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str = value</span><br><span class="line">    str = str.<span class="title function_">replace</span>(<span class="regexp">/[\u4e00-\u9fa5]/g</span>, <span class="string">&#x27;OO&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(str.<span class="property">length</span> &gt; maxByte)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`最多输入<span class="subst">$&#123;maxByte&#125;</span>个字符，<span class="subst">$&#123;<span class="built_in">Math</span>.floor(maxByte / <span class="number">2</span>)&#125;</span>个汉字`</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="title function_">callback</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断一个字符串是否为数字">判断一个字符串是否为数字</h4><p>简单的判断字符串是否为数字的方法就是利用isNaN(),如果返回true,则该字符串不为数字，否则为数字</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo生产下异常处理（持续更新）</title>
    <link href="https://github.com/joydezhong/joydezhong.github.io.git/2020/08/14/hexo%E5%BC%82%E5%B8%B8/"/>
    <id>https://github.com/joydezhong/joydezhong.github.io.git/2020/08/14/hexo%E5%BC%82%E5%B8%B8/</id>
    <published>2020-08-14T13:54:00.000Z</published>
    <updated>2025-03-26T03:21:50.780Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、样式缺失的问题">一、样式缺失的问题</h4><p>在<code>hexo g</code>生成站点文件的时候，经常会出现样式丢失的问题，当你去查看css目录下的文件，可能会发现生成的文件为0kb，空内容，可参考以下解决方式：</p><p>打开根目录的配置文件<code>_config.yml</code></p><ol><li>把 15 行的 url 改成htpps开头的仓库名,比如: <a href="https://github.com/xxxx/xxx.github.io.git">https://github.com/xxxx/xxx.github.io.git</a></li><li>把 16 行的 root 改成 /myBlog.github.io/ 即 /你的项目仓库名/</li><li>然后重新部署 <code>hexo g &amp;&amp; hexo d</code></li></ol><p>要注意的是，如果你的站点不是托管在 github 等页面服务上，而是复制到自己的服务器上，请把步骤 2 的 root 改为 /</p><h4 id="二、升级最新的-hexo-版本后报-Cannot-read-property-‘groupBy’-of-undefined">二、升级最新的 hexo 版本后报 Cannot read property ‘groupBy’ of undefined</h4><p>由于最新的版本移除内部的 lodash 依赖，所有使用了 lodash 函数的情况下可能会报类似的错误，可参考以下解决方式：</p><ol><li>在 hexo 文件目录下安装 loadsh <code>npm install lodash</code></li><li>进入 scripts 目录（不存在则创建），新建一个 js 文件（名称无所谓），写入如下内容:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;template_locals&#x27;</span>, <span class="function"><span class="params">locals</span> =&gt;</span> &#123;</span><br><span class="line">  locals.<span class="property">_</span> = _;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>本方式参考 <a href="https://github.com/chaooo/hexo-theme-BlueLake/issues/111">github Issues</a></p><h4 id="三、node14-和旧版-hexo-不兼容问题">三、node14 和旧版 hexo 不兼容问题</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(node:<span class="number">3908</span>) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:<span class="number">3908</span>) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:<span class="number">3908</span>) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br><span class="line">(node:<span class="number">3908</span>) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency</span><br><span class="line">(node:<span class="number">3908</span>) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency</span><br><span class="line">(node:<span class="number">3908</span>) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p>解决方式：使用<code>npm-check</code>把所有的 npm 依赖更新为最新版本，hexo 新版已经对兼容问题做了处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="web前端" scheme="https://github.com/joydezhong/joydezhong.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
